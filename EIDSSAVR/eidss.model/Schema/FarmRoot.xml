<?xml version="1.0" encoding="utf-8" ?>
<object name="FarmPanel"
        connection="EidssConnectionString"
        generator="ObjectGenerator.xslt"
        xmlns="urn:schemas-bv:objectmodel">

    <storage>
      <get />
      <!--<validate name="spFarmActual_Validate" />-->
    </storage>

    <tables>
        <table name="FarmRoot">
            <properties permissionObject="AccessToFarmData"  auditObject="daoFarm" auditTable="tlbFarmActual"/>
          <labels>
            <item labelId="strFarmFullName" name="strFullName"/>
            <item labelId="idfFarmOwner" name="idfOwner"/>
            <item labelId="strFarmType" name="intHACode"/>
          </labels>
          <fields>
            <storage name="_blnAllowFarmReload" type="bool"/>
          </fields>
          <readonly>
            <fields name="datModificationDate" predicate="c => true"/>
            <fields name="strFarmCode" predicate="c => true"/>
            <fields name="*" predicate="c => false"/>
          </readonly>
            <relations>
                <relation name="Address" table="Address" internal="false" type="link" source="idfFarmAddress" target="idfGeoLocation" />
            </relations>
          <lookups>
            <lookup name="HACode" table="HACodeLookup" source="intHACode" target="intHACode" emptyTextProp="CodeName" emptyTextId="SelectAll" emptyKey="0" notaddempty="true">
              <params>
                <param name="intHACode" lambda="c => (int)eidss.model.Enums.HACode.LivestockAvian" type="int" />
              </params>
            </lookup>
            <lookup name="OwnershipStructure" table="BaseReference" section="rftOwnershipType" source="idfsOwnershipStructure" target="idfsBaseReference" />
          </lookups>
          
            <storage>
                <post name="spFarmPanel_Post" />
              <delete name="spFarm_Delete"/>
              <candelete name="spFarm_CanDelete"/>
            </storage>
            <postorder>
                <item name="Address" />
                <item name="this" />
            </postorder>
         
            <deleteorder>
                <!--<item name="FarmTree" />
                <item name="Address" />-->
                <item name="this" />
            </deleteorder>
            <extenders>
                <creating>
                  <scalar_extender target="idfFarm" class="GetNewIDExtender" />
                  <lambda_extender target="strFarmCode" type="string" lambda='c => "(new farm)"' />
                  <create_extender target="Address" table="Address" class="ObjectCreateExtender" />
                  <value_extender target="_blnAllowFarmReload" value="true"/>
                  <scalar_extender target="idfObservation" class="GetNewIDExtender" />
                  <value_extender target="blnRootFarm" value="true"/>
                </creating>
              <created>
                <value_extender target="Address.blnGeoLocationShared" value="true"/>
              </created>
              <loaded>
                <lambda_extender target="Address" type="Address" lambda="c => c.Address == null ? AddressAccessor.CreateNewT(manager, c) : c.Address" />
                <value_extender target="_blnAllowFarmReload" value="true"/>
                <custom_extender>
                </custom_extender>
              </loaded>
                <posting>
                  <value_extender target="_blnAllowFarmReload" value="false"/>
                    <db_lambda_extender target="strFarmCode" type="string" lambda='(c,m) => 
                        c.strFarmCode != "(new farm)" 
                        ? c.strFarmCode 
                        : m.SetSpCommand("dbo.spGetNextNumber", (long)NumberingObjectEnum.Farm, DBNull.Value, DBNull.Value)
                        .ExecuteScalar&lt;string&gt;(ScalarSourceType.OutputParameter, "NextNumberValue")' />
                  <custom_extender>
                    <text>
                      obj.idfsAvianFarmType = null;
                      obj.idfsAvianProductionType = null;
                      obj.idfsIntendedUse = null;
                      obj.intBirdsPerBuilding = null;
                      obj.intBuidings = null;
                      
                      obj.idfsOwnershipStructure = null;
                      obj.idfsLivestockProductionType = null;
                      obj.idfsMovementPattern = null;
                      obj.idfsGrazingPattern = null;
                    </text>
                  </custom_extender>
                </posting>
              <posted>
                <value_extender target="_blnAllowFarmReload" value="true"/>
              </posted>                      
            </extenders>
          <handlers>
            <fieldhandler>
              <custom_handler field="idfOwner">
                <text>
                  using (var manager = DbManagerFactory.Factory.Create(ModelUserContext.Instance))
                  {
                      var patient = Patient.Accessor.Instance(null).SelectByKey(manager, obj.idfOwner);
                      if (patient != null)
                      {
                          obj.strOwnerLastName = patient.strLastName;
                          obj.strOwnerFirstName = patient.strFirstName;
                          obj.strOwnerMiddleName = patient.strSecondName;
                      }
                  }
                </text>
              </custom_handler>
            </fieldhandler>
          </handlers>
            <validators>
              <post>
                <required_validator target="intHACode" property="intHACode" label="strFarmType"/>
                <required_validator target="Address.idfsCountry" property="Address.Country" label ="Farm.Address.idfsCountry"/>
                <required_validator target="Address.idfsRegion" property="Address.Region" label ="Farm.Address.idfsRegion"/>
                <required_validator target="Address.idfsRayon" property="Address.Rayon" label ="Farm.Address.idfsRayon"/>
              </post>
            </validators>
          
          <actions>
            <standard>
              <remove type="Create"/>
            </standard>
          </actions>
        </table>
    </tables>

</object>

