using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using bv.model.BLToolkit;
using bv.model.Model.Core;
using eidss.model.Enums;
using eidss.model.Schema;
using eidss.openapi.bll.Exceptions;
using AutoMapper;

namespace eidss.openapi.bll.Converters
{
    internal class HumanCaseConverter :
        BaseConverter<eidss.openapi.contract.HumanCase, eidss.model.Schema.HumanCase>
    {
        private static HumanCaseConverter _instance = new HumanCaseConverter();
        private HumanCaseConverter() { AutoConverter.Nop(); }
        public static HumanCaseConverter Instance { get { return _instance; } }

        internal static void Register()
        {
            Mapper.CreateMap<eidss.openapi.contract.HumanCase, eidss.model.Schema.HumanCase>()
                .ForMember(m => m.PointGeoLocation, e => e.Condition(c => c.LocationOfExposure != null))
                .ForMember(p => p.PointGeoLocation, e => e.MapFrom(m => m.LocationOfExposure))
                //.ForMember(p => p.PointGeoLocation, e => e.ResolveUsing(m => m.LocationOfExposure))

                .ForMember(p => p.strCaseID, e => e.MapFrom(m => m.CaseID))
                .ForMember(p => p.strLocalIdentifier, e => e.MapFrom(m => m.LocalID))
                .ForMember(p => p.strCurrentLocation, e => e.MapFrom(m => m.OtherLocationAtTimeOfNotification))
                .ForMember(p => p.strHospital, e => e.MapFrom(m => m.HospitalAtTimeOfNotification))
                .ForMember(p => p.strHospitalizationPlace, e => e.MapFrom(m => m.PlaceOfHospitalization))
                .ForMember(p => p.strSoughtCareFacility, e => e.MapFrom(m => m.FacilityWherePatientFirstSoughtCare))
                .ForMember(p => p.strNote, e => e.MapFrom(m => m.AdditionalInformationComments))
                .ForMember(p => p.blnClinicalDiagBasis, e => e.MapFrom(m => m.BasisOfDiagnosisClinical))
                .ForMember(p => p.blnLabDiagBasis, e => e.MapFrom(m => m.BasisOfDiagnosisLaboratoryTest))
                .ForMember(p => p.blnEpiDiagBasis, e => e.MapFrom(m => m.BasisOfDiagnosisEpidemiologicalLinks))
                .ForMember(p => p.FinalDiagnosis, e => e.MapFrom(m => m.ChangedDiagnosis))
                .ForMember(p => p.TentativeDiagnosis, e => e.MapFrom(m => m.Diagnosis))

                .ForMember(m => m.CaseProgressStatus, e => e.Condition(c => c.CaseStatus != null))
                .ForMember(p => p.CaseProgressStatus, e => e.MapFrom(m => m.CaseStatus))

                .ForMember(p => p.PatientState, e => e.MapFrom(m => m.PatientStatusAtNotificationTime))
                .ForMember(p => p.AntimicrobialTherapyUsed, e => e.MapFrom(m => m.AntibioticsAdministrated))
                .ForMember(p => p.SpecimenCollected, e => e.MapFrom(m => m.SamplesCollected))
                .ForMember(p => p.RelatedToOutbreak, e => e.MapFrom(m => m.RelationToOutbreak))
                .ForMember(p => p.OccupationType, e => e.MapFrom(m => m.Occupation))
                .ForMember(p => p.ReceivedByOffice, e => e.MapFrom(m => m.NotificationReceivedByFacility))
                .ForMember(p => p.SentByOffice, e => e.MapFrom(m => m.NotificationSentByFacility))
                .ForMember(p => p.InvestigatedByOffice, e => e.MapFrom(m => m.OrganizationConductingInvestigation))
                .ForMember(p => p.SentByPerson, e => e.MapFrom(m => m.NotificationSentByOfficer))
                .ForMember(p => p.ReceivedByPerson, e => e.MapFrom(m => m.NotificationReceivedByOfficer))
                .ForMember(p => p.InvestigatedByPerson, e => e.MapFrom(m => m.EpidemiologistName))
                .ForMember(p => p.datTentativeDiagnosisDate, e => e.MapFrom(m => m.DiagnosisDate))
                .ForMember(p => p.datFinalDiagnosisDate, e => e.MapFrom(m => m.DateOfChangedDiagnosis))
                .ForMember(p => p.datNotificationDate, e => e.MapFrom(m => m.NotificationDate))
                .ForMember(p => p.datCompletionPaperFormDate, e => e.MapFrom(m => m.DateOfCompletionOfPaperForm))
                .ForMember(p => p.datFirstSoughtCareDate, e => e.MapFrom(m => m.DatePatientFirstSoughtCare))
                .ForMember(p => p.datHospitalizationDate, e => e.MapFrom(m => m.DateOfHospitalization))
                .ForMember(p => p.datFacilityLastVisit, e => e.MapFrom(m => m.DateOfLastPatientPresenceAtWork))
                .ForMember(p => p.datExposureDate, e => e.MapFrom(m => m.DateOfExposure))
                .ForMember(p => p.datDischargeDate, e => e.MapFrom(m => m.DateOfDischarge))
                .ForMember(p => p.datOnSetDate, e => e.MapFrom(m => m.DateOfSymptomOnset))
                .ForMember(p => p.datInvestigationStartDate, e => e.MapFrom(m => m.StartingDateOfInvestigation))
                .ForMember(p => p.strOutbreakID, e => e.MapFrom(m => m.OutbreakID))
                .ForMember(p => p.NotCollectedReason, e => e.MapFrom(m => m.ReasonForNotCollectingSamples))
                .ForMember(p => p.PatientLocationType, e => e.MapFrom(m => m.LocationAtTimeOfNotification))

                .ForMember(p => p.CaseTests, e => e.MapFrom(m => m.Tests))
                .ForMember(p => p.CaseTestValidations, e => e.MapFrom(m => m.TestInterpretations))

                // readonly
                .ForMember(p => p.idfCase, e => e.Ignore())
                .ForMember(p => p.datEnteredDate, e => e.Ignore())
                .ForMember(p => p.datModificationDate, e => e.Ignore())

                // not yet
                .ForMember(p => p.ContactedPerson, e => e.Ignore())
                .ForMember(p => p.AntimicrobialTherapy, e => e.Ignore())
                .ForMember(p => p.DiagnosisHistory, e => e.Ignore())

                // ignore
                .ForMember(p => p.uidOfflineCaseID, e => e.Ignore())
                .ForMember(p => p.strSentByFirstName, e => e.Ignore())
                .ForMember(p => p.strSentByPatronymicName, e => e.Ignore())
                .ForMember(p => p.strSentByLastName, e => e.Ignore())
                .ForMember(p => p.strReceivedByFirstName, e => e.Ignore())
                .ForMember(p => p.strReceivedByPatronymicName, e => e.Ignore())
                .ForMember(p => p.strReceivedByLastName, e => e.Ignore())
                .ForMember(p => p.strEpidemiologistsName, e => e.Ignore())
                .ForMember(p => p.strClinicalNotes, e => e.Ignore())
                .ForMember(p => p.strSummaryNotes, e => e.Ignore())
                .ForMember(p => p.strSampleNotes, e => e.Ignore())
                .ForMember(p => p.blnPermantentAddressAsCurrent, e => e.Ignore())
                .ForMember(p => p.datDateOfDeath, e => e.Ignore())
                
                .ForMember(p => p.idfOutbreak, e => e.Ignore())
                .ForMember(p => p.idfsCaseProgressStatus, e => e.Ignore())
                .ForMember(p => p.idfsFinalState, e => e.Ignore())
                .ForMember(p => p.idfsHospitalizationStatus, e => e.Ignore())
                .ForMember(p => p.idfsHumanAgeType, e => e.Ignore())
                .ForMember(p => p.idfsYNAntimicrobialTherapy, e => e.Ignore())
                .ForMember(p => p.idfsYNHospitalization, e => e.Ignore())
                .ForMember(p => p.idfsYNSpecimenCollected, e => e.Ignore())
                .ForMember(p => p.idfsYNRelatedToOutbreak, e => e.Ignore())
                .ForMember(p => p.idfsYNTestsConducted, e => e.Ignore())
                .ForMember(p => p.blnEnableTestsConducted, e => e.Ignore())
                .ForMember(p => p.idfsOutcome, e => e.Ignore())
                .ForMember(p => p.idfsDiagnosis, e => e.Ignore())
                .ForMember(p => p.idfsTentativeDiagnosis, e => e.Ignore())
                .ForMember(p => p.idfsFinalDiagnosis, e => e.Ignore())
                .ForMember(p => p.idfsInitialCaseStatus, e => e.Ignore())
                .ForMember(p => p.idfSentByOffice, e => e.Ignore())
                .ForMember(p => p.strSentByOffice, e => e.Ignore())
                .ForMember(p => p.idfSentByPerson, e => e.Ignore())
                .ForMember(p => p.strSentByPerson, e => e.Ignore())
                .ForMember(p => p.idfReceivedByOffice, e => e.Ignore())
                .ForMember(p => p.strReceivedByOffice, e => e.Ignore())
                .ForMember(p => p.idfReceivedByPerson, e => e.Ignore())
                .ForMember(p => p.strReceivedByPerson, e => e.Ignore())
                .ForMember(p => p.idfInvestigatedByOffice, e => e.Ignore())
                .ForMember(p => p.strInvestigatedByOffice, e => e.Ignore())
                .ForMember(p => p.idfInvestigatedByPerson, e => e.Ignore())
                .ForMember(p => p.strInvestigatedByPerson, e => e.Ignore())
                .ForMember(p => p.idfPointGeoLocation, e => e.Ignore())
                .ForMember(p => p.idfEpiObservation, e => e.Ignore())
                .ForMember(p => p.idfsEPIFormTemplate, e => e.Ignore())
                .ForMember(p => p.idfCSObservation, e => e.Ignore())
                .ForMember(p => p.idfsCSFormTemplate, e => e.Ignore())
                .ForMember(p => p.idfSoughtCareFacility, e => e.Ignore())
                .ForMember(p => p.idfsNotCollectedReason, e => e.Ignore())
                .ForMember(p => p.idfsNonNotifiableDiagnosis, e => e.Ignore())
                .ForMember(p => p.intPatientAge, e => e.Ignore())
                .ForMember(p => p.idfsFinalCaseStatus, e => e.Ignore())
                .ForMember(p => p.idfPersonEnteredBy, e => e.Ignore())
                .ForMember(p => p.strPersonEnteredBy, e => e.Ignore())
                .ForMember(p => p.idfHuman, e => e.Ignore())
                .ForMember(p => p.idfsOccupationType, e => e.Ignore())
                .ForMember(p => p.idfRegistrationAddress, e => e.Ignore())
                .ForMember(p => p.strRegistrationPhone, e => e.Ignore())
                .ForMember(p => p.strWorkPhone, e => e.Ignore())
                .ForMember(p => p.idfsSite, e => e.Ignore())
                .ForMember(p => p.FFPresenterCs, e => e.Ignore())
                .ForMember(p => p.FFPresenterEpi, e => e.Ignore())
                .ForMember(p => p.RegistrationAddress, e => e.Ignore())
                .ForMember(p => p.TentativeDiagnosisLookup, e => e.Ignore())
                .ForMember(p => p.FinalDiagnosisLookup, e => e.Ignore())
                .ForMember(p => p.DiagnosisAll, e => e.Ignore())
                .ForMember(p => p.idfsChangeDiagnosisReason, e => e.Ignore())
                .ForMember(p => p.CaseProgressStatusLookup, e => e.Ignore())
                .ForMember(p => p.InitialCaseClassificationLookup, e => e.Ignore())
                .ForMember(p => p.FinalCaseClassificationLookup, e => e.Ignore())
                .ForMember(p => p.PatientStateLookup, e => e.Ignore())
                .ForMember(p => p.PatientLocationTypeLookup, e => e.Ignore())
                .ForMember(p => p.AntimicrobialTherapyUsedLookup, e => e.Ignore())
                .ForMember(p => p.HospitalizationLookup, e => e.Ignore())
                .ForMember(p => p.SpecimenCollectedLookup, e => e.Ignore())
                .ForMember(p => p.RelatedToOutbreakLookup, e => e.Ignore())
                .ForMember(p => p.TestsConductedLookup, e => e.Ignore())
                .ForMember(p => p.OutcomeLookup, e => e.Ignore())
                .ForMember(p => p.NonNotifiableDiagnosisLookup, e => e.Ignore())
                .ForMember(p => p.OccupationTypeLookup, e => e.Ignore())
                .ForMember(p => p.NotCollectedReasonLookup, e => e.Ignore())
                .ForMember(p => p.SentByOfficeLookup, e => e.Ignore())
                .ForMember(p => p.ReceivedByOfficeLookup, e => e.Ignore())
                .ForMember(p => p.InvestigatedByOfficeLookup, e => e.Ignore())
                .ForMember(p => p.SentByPersonLookup, e => e.Ignore())
                .ForMember(p => p.ReceivedByPersonLookup, e => e.Ignore())
                .ForMember(p => p.InvestigatedByPersonLookup, e => e.Ignore())
                .ForMember(p => p.strOfficeEnteredBy, e => e.Ignore())
                .ForMember(p => p.datFinalCaseClassificationDate, e => e.Ignore())
                .ForMember(p => p.idfHospital, e => e.Ignore())
                .ForMember(p => p.Hospital, e => e.Ignore())
                .ForMember(p => p.HospitalLookup, e => e.Ignore())
                .ForMember(p => p.idfOfficeEnteredBy, e => e.Ignore())
                .ForMember(p => p.datModificationForArchiveDate, e => e.Ignore())
                .ForMember(p => p.Parent, e => e.Ignore())
                .ForMember(p => p.ReadOnly, e => e.Ignore())
                .ForMember(p => p.NotifyChanges, e => e.Ignore())
                .ForMember(p => p.Environment, e => e.Ignore())

                /*.ForAllMembers(e => e.Condition(context => 
                        context.MemberName == "CaseProgressStatus" 
                        ? context.SourceValue != null
                        : AutoConverter.CheckReadOnly<eidss.model.Schema.HumanCase>(context)
                    ))*/
                ;
            Mapper.CreateMap<eidss.model.Schema.HumanCase, eidss.openapi.contract.HumanCase>()
                .ForMember(c => c.RecordID, e => e.MapFrom(m => m.idfCase))
                .ForMember(c => c.CaseID, e => e.MapFrom(m => m.strCaseID))
                .ForMember(c => c.LocalID, e => e.MapFrom(m => m.strLocalIdentifier))
                .ForMember(c => c.OtherLocationAtTimeOfNotification, e => e.MapFrom(m => m.strCurrentLocation))
                .ForMember(c => c.HospitalAtTimeOfNotification, e => e.MapFrom(m => m.strHospital))
                .ForMember(c => c.PlaceOfHospitalization, e => e.MapFrom(m => m.strHospitalizationPlace))
                .ForMember(c => c.FacilityWherePatientFirstSoughtCare, e => e.MapFrom(m => m.strSoughtCareFacility))
                .ForMember(c => c.AdditionalInformationComments, e => e.MapFrom(m => m.strNote))
                .ForMember(c => c.BasisOfDiagnosisClinical, e => e.MapFrom(m => m.blnClinicalDiagBasis))
                .ForMember(c => c.BasisOfDiagnosisLaboratoryTest, e => e.MapFrom(m => m.blnLabDiagBasis))
                .ForMember(c => c.BasisOfDiagnosisEpidemiologicalLinks, e => e.MapFrom(m => m.blnEpiDiagBasis))
                .ForMember(c => c.Diagnosis, e => e.MapFrom(m => m.TentativeDiagnosis))
                .ForMember(c => c.ChangedDiagnosis, e => e.MapFrom(m => m.FinalDiagnosis))
                .ForMember(c => c.CaseStatus, e => e.MapFrom(m => m.CaseProgressStatus))
                .ForMember(c => c.PatientStatusAtNotificationTime, e => e.MapFrom(m => m.PatientState))
                .ForMember(c => c.AntibioticsAdministrated, e => e.MapFrom(m => m.AntimicrobialTherapyUsed))
                .ForMember(c => c.SamplesCollected, e => e.MapFrom(m => m.SpecimenCollected))
                .ForMember(c => c.RelationToOutbreak, e => e.MapFrom(m => m.RelatedToOutbreak))
                .ForMember(c => c.Occupation, e => e.MapFrom(m => m.OccupationType))
                .ForMember(c => c.NotificationReceivedByFacility, e => e.MapFrom(m => m.ReceivedByOffice))
                .ForMember(c => c.NotificationSentByFacility, e => e.MapFrom(m => m.SentByOffice))
                .ForMember(c => c.OrganizationConductingInvestigation, e => e.MapFrom(m => m.InvestigatedByOffice))
                .ForMember(c => c.NotificationSentByOfficer, e => e.MapFrom(m => m.SentByPerson))
                .ForMember(c => c.NotificationReceivedByOfficer, e => e.MapFrom(m => m.ReceivedByPerson))
                .ForMember(c => c.EpidemiologistName, e => e.MapFrom(m => m.InvestigatedByPerson))
                .ForMember(c => c.DiagnosisDate, e => e.MapFrom(m => m.datTentativeDiagnosisDate))
                .ForMember(c => c.DateOfChangedDiagnosis, e => e.MapFrom(m => m.datFinalDiagnosisDate))
                .ForMember(c => c.NotificationDate, e => e.MapFrom(m => m.datNotificationDate))
                .ForMember(c => c.DateOfCompletionOfPaperForm, e => e.MapFrom(m => m.datCompletionPaperFormDate))
                .ForMember(c => c.DatePatientFirstSoughtCare, e => e.MapFrom(m => m.datFirstSoughtCareDate))
                .ForMember(c => c.DateOfHospitalization, e => e.MapFrom(m => m.datHospitalizationDate))
                .ForMember(c => c.DateOfLastPatientPresenceAtWork, e => e.MapFrom(m => m.datFacilityLastVisit))
                .ForMember(c => c.DateOfExposure, e => e.MapFrom(m => m.datExposureDate))
                .ForMember(c => c.DateOfDischarge, e => e.MapFrom(m => m.datDischargeDate))
                .ForMember(c => c.DateOfSymptomOnset, e => e.MapFrom(m => m.datOnSetDate))
                .ForMember(c => c.StartingDateOfInvestigation, e => e.MapFrom(m => m.datInvestigationStartDate))
                .ForMember(c => c.DateEntered, e => e.MapFrom(m => m.datEnteredDate))
                .ForMember(c => c.DateLastSaved, e => e.MapFrom(m => m.datModificationDate))
                .ForMember(c => c.OutbreakID, e => e.MapFrom(m => m.strOutbreakID))
                .ForMember(c => c.LocationOfExposure, e => e.MapFrom(m => m.PointGeoLocation))
                .ForMember(c => c.ReasonForNotCollectingSamples, e => e.MapFrom(m => m.NotCollectedReason))
                .ForMember(c => c.LocationAtTimeOfNotification, e => e.MapFrom(m => m.PatientLocationType))

                .ForMember(c => c.Tests, e => e.MapFrom(m => m.CaseTests))
                .ForMember(p => p.TestInterpretations, e => e.MapFrom(m => m.CaseTestValidations))
                ;
        }

    }
}