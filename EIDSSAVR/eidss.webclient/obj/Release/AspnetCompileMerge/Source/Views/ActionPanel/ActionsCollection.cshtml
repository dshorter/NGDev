@model eidss.webclient.Models.ActionsCollectionModel
           
@{
    Layout = null;
}

@using bv.common.Resources
@using bv.common.Enums
@using bv.model.Model.Core

@{
    var permissions = (Model.Obj == null) ? Model.Accessor as IObjectPermissions : Model.Obj.GetPermissions();

    foreach (var action in Model.Collection)
    {
        //добавляем кнопку
        //TODO заменить на телериковские кнопки с картинками
        //TODO непонятно какой телериковский контрол использовать для отображения групп
        //TODO вынести код для кнопки в Extender к другим контролам

        var buttonName = String.Format("b{0}Panel_{1}", Model.PanelType, action.Name);
        var actionName = String.Empty;
        var actionArgs = String.Empty;
        var disabled = String.Empty;
        var cls = "button";

        const string actionMask = "javascript:{0}('{1}');";

        var iconId = action.IconId(Model.Obj, permissions);
        var imageUrl =
            iconId.Length > 0 ?
                String.Format("{0}{1}.png", ("~/Content/Images/ActionsPanelButtons/"), iconId) : String.Empty;

        #region Определение текущего контроллера

        //имеется ввиду не ActionsPanel, а его носитель

        var controllerName = ViewBag.CurrentController;

        //var filePath = Request.CurrentExecutionFilePath;
        //int pos = filePath.IndexOf("/", 1);
        //var controllerName = filePath.Substring(1, pos - 1);

        #endregion

        if (!Model.IsListForm() && action.ActionType == ActionTypes.Action && !action.IsEnable(Model.Obj, permissions))
        {
            continue;
        }

        if (!action.IsVisible(Model.Obj, permissions))
        {
            continue;
        }

        switch (action.ActionType)
        {
            case ActionTypes.Action:
                actionName = action.IsWebJScript ? 
                    action.MethodName.Length > 0 ? action.MethodName : action.Name 
                    : "actions.edit";
                actionArgs = Url.Action(action.Name, controllerName, new {area = String.Empty});
                break;
            case ActionTypes.Refresh:
                actionName = "actions.refresh";
                break;
            case ActionTypes.Close:
                actionName = "actions.redirect";
                actionArgs = Url.Action("Home", "Account", new {area = String.Empty}); //ResolveUrl("~/Views/Home/Index.cshtml");
                break;
            case ActionTypes.Create:
                actionName = Model.IsListForm() ? "actions.createFromList" : "actions.create";
                actionArgs = Url.Action("Details", controllerName, new {area = String.Empty});
                break;
            case ActionTypes.Edit:
                actionName = "actions.edit";
                actionArgs = Url.Action("Details", controllerName, new {area = String.Empty});
                break;
            case ActionTypes.View:
                actionName = "actions.edit";
                actionArgs = Url.Action("Details", controllerName, new {area = String.Empty});
                break;
                //case ActionTypes.Search:
                //    actionName = "DisplaySearchPanel";                
                //    break;
            case ActionTypes.Cancel:
                actionName = "actions.cancel";
                if (action.Name == "Ok")
                {
                    actionName = "detailPage.close";
                }
                break;
            case ActionTypes.Ok:
                actionName = "actions.ok";
                break;
            case ActionTypes.Save:
                actionName = "actions.save";
                break;
            case ActionTypes.Report:
                //TODO сделать показ отчётов
                break;
            case ActionTypes.Delete:
                if (Model.IsListForm())
                {
                    actionName = "actions.deleteItemFromList";
                    actionArgs = Url.Action("DeleteListObject", "System", new {area = String.Empty, accessor = Model.Accessor.GetType().FullName});
                }
                else
                {
                    actionName = "actions.deleteItem";
                    disabled = Model.Obj.IsValidObject ? String.Empty : "disabled=disabled";
                    cls = Model.Obj.IsValidObject ? cls : cls + " k-state-disabled";
                    actionArgs = Url.Action("DeleteObject", "System", new {area = String.Empty, accessor = Model.Accessor.GetType().FullName, id = Model.Obj.Key.ToString()});
                }
                break;

        }
        <button id="@buttonName" type="button" class="@cls" onclick="@String.Format(actionMask, actionName, actionArgs)" @disabled >
            @BvMessages.Get(action.CaptionId(Model.Obj, permissions))
        </button>      
    }
}