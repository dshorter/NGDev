//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace EIDSS.Reports.Document.Lim.Case {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("CaseTestDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class CaseTestDataSet : global::System.Data.DataSet {
        
        private CaseTestsDataTable tableCaseTests;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public CaseTestDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected CaseTestDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["CaseTests"] != null)) {
                    base.Tables.Add(new CaseTestsDataTable(ds.Tables["CaseTests"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CaseTestsDataTable CaseTests {
            get {
                return this.tableCaseTests;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public override global::System.Data.DataSet Clone() {
            CaseTestDataSet cln = ((CaseTestDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["CaseTests"] != null)) {
                    base.Tables.Add(new CaseTestsDataTable(ds.Tables["CaseTests"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal void InitVars(bool initTable) {
            this.tableCaseTests = ((CaseTestsDataTable)(base.Tables["CaseTests"]));
            if ((initTable == true)) {
                if ((this.tableCaseTests != null)) {
                    this.tableCaseTests.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitClass() {
            this.DataSetName = "CaseTestDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/CaseTestDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableCaseTests = new CaseTestsDataTable();
            base.Tables.Add(this.tableCaseTests);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeCaseTests() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            CaseTestDataSet ds = new CaseTestDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void CaseTestsRowChangeEventHandler(object sender, CaseTestsRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CaseTestsDataTable : global::System.Data.TypedTableBase<CaseTestsRow> {
            
            private global::System.Data.DataColumn columnidfTest;
            
            private global::System.Data.DataColumn columnidfTestObservation;
            
            private global::System.Data.DataColumn columnidfsTestName;
            
            private global::System.Data.DataColumn columnstrLocalSampleID;
            
            private global::System.Data.DataColumn columnstrLabSampleID;
            
            private global::System.Data.DataColumn columnstrSampleType;
            
            private global::System.Data.DataColumn columnstrTestDiagnosis;
            
            private global::System.Data.DataColumn columnstrTestName;
            
            private global::System.Data.DataColumn columnstrTestRunID;
            
            private global::System.Data.DataColumn columndatResultDate;
            
            private global::System.Data.DataColumn columnstrFunctionalArea;
            
            private global::System.Data.DataColumn columnstrTestCategory;
            
            private global::System.Data.DataColumn columnstrTestStatus;
            
            private global::System.Data.DataColumn columnstrTestResult;
            
            private global::System.Data.DataColumn columnstrHumCaseId;
            
            private global::System.Data.DataColumn columnstrHumCaseStatus;
            
            private global::System.Data.DataColumn columnstrHumPatient;
            
            private global::System.Data.DataColumn columnstrHumDiagnosis;
            
            private global::System.Data.DataColumn columnstrHumCaseClassification;
            
            private global::System.Data.DataColumn columnstrVetCaseId;
            
            private global::System.Data.DataColumn columnstrVetCaseStatus;
            
            private global::System.Data.DataColumn columnstrVetFarmOwner;
            
            private global::System.Data.DataColumn columnstrVetDiagnoses;
            
            private global::System.Data.DataColumn columnstrVetCaseClassification;
            
            private global::System.Data.DataColumn columnstrExternalLaboratory;
            
            private global::System.Data.DataColumn columnstrExternalEmployee;
            
            private global::System.Data.DataColumn columnstrExternalDataTestResultReceived;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CaseTestsDataTable() {
                this.TableName = "CaseTests";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal CaseTestsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected CaseTestsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn idfTestColumn {
                get {
                    return this.columnidfTest;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn idfTestObservationColumn {
                get {
                    return this.columnidfTestObservation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn idfsTestNameColumn {
                get {
                    return this.columnidfsTestName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn strLocalSampleIDColumn {
                get {
                    return this.columnstrLocalSampleID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn strLabSampleIDColumn {
                get {
                    return this.columnstrLabSampleID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn strSampleTypeColumn {
                get {
                    return this.columnstrSampleType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn strTestDiagnosisColumn {
                get {
                    return this.columnstrTestDiagnosis;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn strTestNameColumn {
                get {
                    return this.columnstrTestName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn strTestRunIDColumn {
                get {
                    return this.columnstrTestRunID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn datResultDateColumn {
                get {
                    return this.columndatResultDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn strFunctionalAreaColumn {
                get {
                    return this.columnstrFunctionalArea;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn strTestCategoryColumn {
                get {
                    return this.columnstrTestCategory;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn strTestStatusColumn {
                get {
                    return this.columnstrTestStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn strTestResultColumn {
                get {
                    return this.columnstrTestResult;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn strHumCaseIdColumn {
                get {
                    return this.columnstrHumCaseId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn strHumCaseStatusColumn {
                get {
                    return this.columnstrHumCaseStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn strHumPatientColumn {
                get {
                    return this.columnstrHumPatient;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn strHumDiagnosisColumn {
                get {
                    return this.columnstrHumDiagnosis;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn strHumCaseClassificationColumn {
                get {
                    return this.columnstrHumCaseClassification;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn strVetCaseIdColumn {
                get {
                    return this.columnstrVetCaseId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn strVetCaseStatusColumn {
                get {
                    return this.columnstrVetCaseStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn strVetFarmOwnerColumn {
                get {
                    return this.columnstrVetFarmOwner;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn strVetDiagnosesColumn {
                get {
                    return this.columnstrVetDiagnoses;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn strVetCaseClassificationColumn {
                get {
                    return this.columnstrVetCaseClassification;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn strExternalLaboratoryColumn {
                get {
                    return this.columnstrExternalLaboratory;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn strExternalEmployeeColumn {
                get {
                    return this.columnstrExternalEmployee;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn strExternalDataTestResultReceivedColumn {
                get {
                    return this.columnstrExternalDataTestResultReceived;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CaseTestsRow this[int index] {
                get {
                    return ((CaseTestsRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CaseTestsRowChangeEventHandler CaseTestsRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CaseTestsRowChangeEventHandler CaseTestsRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CaseTestsRowChangeEventHandler CaseTestsRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CaseTestsRowChangeEventHandler CaseTestsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddCaseTestsRow(CaseTestsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CaseTestsRow AddCaseTestsRow(
                        long idfTest, 
                        long idfTestObservation, 
                        long idfsTestName, 
                        string strLocalSampleID, 
                        string strLabSampleID, 
                        string strSampleType, 
                        string strTestDiagnosis, 
                        string strTestName, 
                        string strTestRunID, 
                        System.DateTime datResultDate, 
                        string strFunctionalArea, 
                        string strTestCategory, 
                        string strTestStatus, 
                        string strTestResult, 
                        string strHumCaseId, 
                        string strHumCaseStatus, 
                        string strHumPatient, 
                        string strHumDiagnosis, 
                        string strHumCaseClassification, 
                        string strVetCaseId, 
                        string strVetCaseStatus, 
                        string strVetFarmOwner, 
                        string strVetDiagnoses, 
                        string strVetCaseClassification, 
                        string strExternalLaboratory, 
                        string strExternalEmployee, 
                        string strExternalDataTestResultReceived) {
                CaseTestsRow rowCaseTestsRow = ((CaseTestsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        idfTest,
                        idfTestObservation,
                        idfsTestName,
                        strLocalSampleID,
                        strLabSampleID,
                        strSampleType,
                        strTestDiagnosis,
                        strTestName,
                        strTestRunID,
                        datResultDate,
                        strFunctionalArea,
                        strTestCategory,
                        strTestStatus,
                        strTestResult,
                        strHumCaseId,
                        strHumCaseStatus,
                        strHumPatient,
                        strHumDiagnosis,
                        strHumCaseClassification,
                        strVetCaseId,
                        strVetCaseStatus,
                        strVetFarmOwner,
                        strVetDiagnoses,
                        strVetCaseClassification,
                        strExternalLaboratory,
                        strExternalEmployee,
                        strExternalDataTestResultReceived};
                rowCaseTestsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCaseTestsRow);
                return rowCaseTestsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CaseTestsRow FindByidfTest(long idfTest) {
                return ((CaseTestsRow)(this.Rows.Find(new object[] {
                            idfTest})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                CaseTestsDataTable cln = ((CaseTestsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CaseTestsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnidfTest = base.Columns["idfTest"];
                this.columnidfTestObservation = base.Columns["idfTestObservation"];
                this.columnidfsTestName = base.Columns["idfsTestName"];
                this.columnstrLocalSampleID = base.Columns["strLocalSampleID"];
                this.columnstrLabSampleID = base.Columns["strLabSampleID"];
                this.columnstrSampleType = base.Columns["strSampleType"];
                this.columnstrTestDiagnosis = base.Columns["strTestDiagnosis"];
                this.columnstrTestName = base.Columns["strTestName"];
                this.columnstrTestRunID = base.Columns["strTestRunID"];
                this.columndatResultDate = base.Columns["datResultDate"];
                this.columnstrFunctionalArea = base.Columns["strFunctionalArea"];
                this.columnstrTestCategory = base.Columns["strTestCategory"];
                this.columnstrTestStatus = base.Columns["strTestStatus"];
                this.columnstrTestResult = base.Columns["strTestResult"];
                this.columnstrHumCaseId = base.Columns["strHumCaseId"];
                this.columnstrHumCaseStatus = base.Columns["strHumCaseStatus"];
                this.columnstrHumPatient = base.Columns["strHumPatient"];
                this.columnstrHumDiagnosis = base.Columns["strHumDiagnosis"];
                this.columnstrHumCaseClassification = base.Columns["strHumCaseClassification"];
                this.columnstrVetCaseId = base.Columns["strVetCaseId"];
                this.columnstrVetCaseStatus = base.Columns["strVetCaseStatus"];
                this.columnstrVetFarmOwner = base.Columns["strVetFarmOwner"];
                this.columnstrVetDiagnoses = base.Columns["strVetDiagnoses"];
                this.columnstrVetCaseClassification = base.Columns["strVetCaseClassification"];
                this.columnstrExternalLaboratory = base.Columns["strExternalLaboratory"];
                this.columnstrExternalEmployee = base.Columns["strExternalEmployee"];
                this.columnstrExternalDataTestResultReceived = base.Columns["strExternalDataTestResultReceived"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnidfTest = new global::System.Data.DataColumn("idfTest", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnidfTest);
                this.columnidfTestObservation = new global::System.Data.DataColumn("idfTestObservation", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnidfTestObservation);
                this.columnidfsTestName = new global::System.Data.DataColumn("idfsTestName", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnidfsTestName);
                this.columnstrLocalSampleID = new global::System.Data.DataColumn("strLocalSampleID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstrLocalSampleID);
                this.columnstrLabSampleID = new global::System.Data.DataColumn("strLabSampleID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstrLabSampleID);
                this.columnstrSampleType = new global::System.Data.DataColumn("strSampleType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstrSampleType);
                this.columnstrTestDiagnosis = new global::System.Data.DataColumn("strTestDiagnosis", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstrTestDiagnosis);
                this.columnstrTestName = new global::System.Data.DataColumn("strTestName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstrTestName);
                this.columnstrTestRunID = new global::System.Data.DataColumn("strTestRunID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstrTestRunID);
                this.columndatResultDate = new global::System.Data.DataColumn("datResultDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndatResultDate);
                this.columnstrFunctionalArea = new global::System.Data.DataColumn("strFunctionalArea", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstrFunctionalArea);
                this.columnstrTestCategory = new global::System.Data.DataColumn("strTestCategory", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstrTestCategory);
                this.columnstrTestStatus = new global::System.Data.DataColumn("strTestStatus", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstrTestStatus);
                this.columnstrTestResult = new global::System.Data.DataColumn("strTestResult", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstrTestResult);
                this.columnstrHumCaseId = new global::System.Data.DataColumn("strHumCaseId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstrHumCaseId);
                this.columnstrHumCaseStatus = new global::System.Data.DataColumn("strHumCaseStatus", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstrHumCaseStatus);
                this.columnstrHumPatient = new global::System.Data.DataColumn("strHumPatient", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstrHumPatient);
                this.columnstrHumDiagnosis = new global::System.Data.DataColumn("strHumDiagnosis", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstrHumDiagnosis);
                this.columnstrHumCaseClassification = new global::System.Data.DataColumn("strHumCaseClassification", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstrHumCaseClassification);
                this.columnstrVetCaseId = new global::System.Data.DataColumn("strVetCaseId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstrVetCaseId);
                this.columnstrVetCaseStatus = new global::System.Data.DataColumn("strVetCaseStatus", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstrVetCaseStatus);
                this.columnstrVetFarmOwner = new global::System.Data.DataColumn("strVetFarmOwner", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstrVetFarmOwner);
                this.columnstrVetDiagnoses = new global::System.Data.DataColumn("strVetDiagnoses", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstrVetDiagnoses);
                this.columnstrVetCaseClassification = new global::System.Data.DataColumn("strVetCaseClassification", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstrVetCaseClassification);
                this.columnstrExternalLaboratory = new global::System.Data.DataColumn("strExternalLaboratory", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstrExternalLaboratory);
                this.columnstrExternalEmployee = new global::System.Data.DataColumn("strExternalEmployee", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstrExternalEmployee);
                this.columnstrExternalDataTestResultReceived = new global::System.Data.DataColumn("strExternalDataTestResultReceived", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstrExternalDataTestResultReceived);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnidfTest}, true));
                this.columnidfTest.AllowDBNull = false;
                this.columnidfTest.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CaseTestsRow NewCaseTestsRow() {
                return ((CaseTestsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CaseTestsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(CaseTestsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CaseTestsRowChanged != null)) {
                    this.CaseTestsRowChanged(this, new CaseTestsRowChangeEvent(((CaseTestsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CaseTestsRowChanging != null)) {
                    this.CaseTestsRowChanging(this, new CaseTestsRowChangeEvent(((CaseTestsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CaseTestsRowDeleted != null)) {
                    this.CaseTestsRowDeleted(this, new CaseTestsRowChangeEvent(((CaseTestsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CaseTestsRowDeleting != null)) {
                    this.CaseTestsRowDeleting(this, new CaseTestsRowChangeEvent(((CaseTestsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveCaseTestsRow(CaseTestsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                CaseTestDataSet ds = new CaseTestDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CaseTestsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class CaseTestsRow : global::System.Data.DataRow {
            
            private CaseTestsDataTable tableCaseTests;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal CaseTestsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCaseTests = ((CaseTestsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long idfTest {
                get {
                    return ((long)(this[this.tableCaseTests.idfTestColumn]));
                }
                set {
                    this[this.tableCaseTests.idfTestColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long idfTestObservation {
                get {
                    try {
                        return ((long)(this[this.tableCaseTests.idfTestObservationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'idfTestObservation\' in table \'CaseTests\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCaseTests.idfTestObservationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long idfsTestName {
                get {
                    try {
                        return ((long)(this[this.tableCaseTests.idfsTestNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'idfsTestName\' in table \'CaseTests\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCaseTests.idfsTestNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string strLocalSampleID {
                get {
                    try {
                        return ((string)(this[this.tableCaseTests.strLocalSampleIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'strLocalSampleID\' in table \'CaseTests\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCaseTests.strLocalSampleIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string strLabSampleID {
                get {
                    try {
                        return ((string)(this[this.tableCaseTests.strLabSampleIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'strLabSampleID\' in table \'CaseTests\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCaseTests.strLabSampleIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string strSampleType {
                get {
                    try {
                        return ((string)(this[this.tableCaseTests.strSampleTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'strSampleType\' in table \'CaseTests\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCaseTests.strSampleTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string strTestDiagnosis {
                get {
                    try {
                        return ((string)(this[this.tableCaseTests.strTestDiagnosisColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'strTestDiagnosis\' in table \'CaseTests\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCaseTests.strTestDiagnosisColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string strTestName {
                get {
                    try {
                        return ((string)(this[this.tableCaseTests.strTestNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'strTestName\' in table \'CaseTests\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCaseTests.strTestNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string strTestRunID {
                get {
                    try {
                        return ((string)(this[this.tableCaseTests.strTestRunIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'strTestRunID\' in table \'CaseTests\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCaseTests.strTestRunIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.DateTime datResultDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableCaseTests.datResultDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'datResultDate\' in table \'CaseTests\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCaseTests.datResultDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string strFunctionalArea {
                get {
                    try {
                        return ((string)(this[this.tableCaseTests.strFunctionalAreaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'strFunctionalArea\' in table \'CaseTests\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCaseTests.strFunctionalAreaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string strTestCategory {
                get {
                    try {
                        return ((string)(this[this.tableCaseTests.strTestCategoryColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'strTestCategory\' in table \'CaseTests\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCaseTests.strTestCategoryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string strTestStatus {
                get {
                    try {
                        return ((string)(this[this.tableCaseTests.strTestStatusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'strTestStatus\' in table \'CaseTests\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCaseTests.strTestStatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string strTestResult {
                get {
                    try {
                        return ((string)(this[this.tableCaseTests.strTestResultColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'strTestResult\' in table \'CaseTests\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCaseTests.strTestResultColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string strHumCaseId {
                get {
                    try {
                        return ((string)(this[this.tableCaseTests.strHumCaseIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'strHumCaseId\' in table \'CaseTests\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCaseTests.strHumCaseIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string strHumCaseStatus {
                get {
                    try {
                        return ((string)(this[this.tableCaseTests.strHumCaseStatusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'strHumCaseStatus\' in table \'CaseTests\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCaseTests.strHumCaseStatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string strHumPatient {
                get {
                    try {
                        return ((string)(this[this.tableCaseTests.strHumPatientColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'strHumPatient\' in table \'CaseTests\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCaseTests.strHumPatientColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string strHumDiagnosis {
                get {
                    try {
                        return ((string)(this[this.tableCaseTests.strHumDiagnosisColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'strHumDiagnosis\' in table \'CaseTests\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCaseTests.strHumDiagnosisColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string strHumCaseClassification {
                get {
                    try {
                        return ((string)(this[this.tableCaseTests.strHumCaseClassificationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'strHumCaseClassification\' in table \'CaseTests\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCaseTests.strHumCaseClassificationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string strVetCaseId {
                get {
                    try {
                        return ((string)(this[this.tableCaseTests.strVetCaseIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'strVetCaseId\' in table \'CaseTests\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCaseTests.strVetCaseIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string strVetCaseStatus {
                get {
                    try {
                        return ((string)(this[this.tableCaseTests.strVetCaseStatusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'strVetCaseStatus\' in table \'CaseTests\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCaseTests.strVetCaseStatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string strVetFarmOwner {
                get {
                    try {
                        return ((string)(this[this.tableCaseTests.strVetFarmOwnerColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'strVetFarmOwner\' in table \'CaseTests\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCaseTests.strVetFarmOwnerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string strVetDiagnoses {
                get {
                    try {
                        return ((string)(this[this.tableCaseTests.strVetDiagnosesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'strVetDiagnoses\' in table \'CaseTests\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCaseTests.strVetDiagnosesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string strVetCaseClassification {
                get {
                    try {
                        return ((string)(this[this.tableCaseTests.strVetCaseClassificationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'strVetCaseClassification\' in table \'CaseTests\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCaseTests.strVetCaseClassificationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string strExternalLaboratory {
                get {
                    try {
                        return ((string)(this[this.tableCaseTests.strExternalLaboratoryColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'strExternalLaboratory\' in table \'CaseTests\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCaseTests.strExternalLaboratoryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string strExternalEmployee {
                get {
                    try {
                        return ((string)(this[this.tableCaseTests.strExternalEmployeeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'strExternalEmployee\' in table \'CaseTests\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCaseTests.strExternalEmployeeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string strExternalDataTestResultReceived {
                get {
                    try {
                        return ((string)(this[this.tableCaseTests.strExternalDataTestResultReceivedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'strExternalDataTestResultReceived\' in table \'CaseTests\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableCaseTests.strExternalDataTestResultReceivedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsidfTestObservationNull() {
                return this.IsNull(this.tableCaseTests.idfTestObservationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetidfTestObservationNull() {
                this[this.tableCaseTests.idfTestObservationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsidfsTestNameNull() {
                return this.IsNull(this.tableCaseTests.idfsTestNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetidfsTestNameNull() {
                this[this.tableCaseTests.idfsTestNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsstrLocalSampleIDNull() {
                return this.IsNull(this.tableCaseTests.strLocalSampleIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetstrLocalSampleIDNull() {
                this[this.tableCaseTests.strLocalSampleIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsstrLabSampleIDNull() {
                return this.IsNull(this.tableCaseTests.strLabSampleIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetstrLabSampleIDNull() {
                this[this.tableCaseTests.strLabSampleIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsstrSampleTypeNull() {
                return this.IsNull(this.tableCaseTests.strSampleTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetstrSampleTypeNull() {
                this[this.tableCaseTests.strSampleTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsstrTestDiagnosisNull() {
                return this.IsNull(this.tableCaseTests.strTestDiagnosisColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetstrTestDiagnosisNull() {
                this[this.tableCaseTests.strTestDiagnosisColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsstrTestNameNull() {
                return this.IsNull(this.tableCaseTests.strTestNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetstrTestNameNull() {
                this[this.tableCaseTests.strTestNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsstrTestRunIDNull() {
                return this.IsNull(this.tableCaseTests.strTestRunIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetstrTestRunIDNull() {
                this[this.tableCaseTests.strTestRunIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsdatResultDateNull() {
                return this.IsNull(this.tableCaseTests.datResultDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetdatResultDateNull() {
                this[this.tableCaseTests.datResultDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsstrFunctionalAreaNull() {
                return this.IsNull(this.tableCaseTests.strFunctionalAreaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetstrFunctionalAreaNull() {
                this[this.tableCaseTests.strFunctionalAreaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsstrTestCategoryNull() {
                return this.IsNull(this.tableCaseTests.strTestCategoryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetstrTestCategoryNull() {
                this[this.tableCaseTests.strTestCategoryColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsstrTestStatusNull() {
                return this.IsNull(this.tableCaseTests.strTestStatusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetstrTestStatusNull() {
                this[this.tableCaseTests.strTestStatusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsstrTestResultNull() {
                return this.IsNull(this.tableCaseTests.strTestResultColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetstrTestResultNull() {
                this[this.tableCaseTests.strTestResultColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsstrHumCaseIdNull() {
                return this.IsNull(this.tableCaseTests.strHumCaseIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetstrHumCaseIdNull() {
                this[this.tableCaseTests.strHumCaseIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsstrHumCaseStatusNull() {
                return this.IsNull(this.tableCaseTests.strHumCaseStatusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetstrHumCaseStatusNull() {
                this[this.tableCaseTests.strHumCaseStatusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsstrHumPatientNull() {
                return this.IsNull(this.tableCaseTests.strHumPatientColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetstrHumPatientNull() {
                this[this.tableCaseTests.strHumPatientColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsstrHumDiagnosisNull() {
                return this.IsNull(this.tableCaseTests.strHumDiagnosisColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetstrHumDiagnosisNull() {
                this[this.tableCaseTests.strHumDiagnosisColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsstrHumCaseClassificationNull() {
                return this.IsNull(this.tableCaseTests.strHumCaseClassificationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetstrHumCaseClassificationNull() {
                this[this.tableCaseTests.strHumCaseClassificationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsstrVetCaseIdNull() {
                return this.IsNull(this.tableCaseTests.strVetCaseIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetstrVetCaseIdNull() {
                this[this.tableCaseTests.strVetCaseIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsstrVetCaseStatusNull() {
                return this.IsNull(this.tableCaseTests.strVetCaseStatusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetstrVetCaseStatusNull() {
                this[this.tableCaseTests.strVetCaseStatusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsstrVetFarmOwnerNull() {
                return this.IsNull(this.tableCaseTests.strVetFarmOwnerColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetstrVetFarmOwnerNull() {
                this[this.tableCaseTests.strVetFarmOwnerColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsstrVetDiagnosesNull() {
                return this.IsNull(this.tableCaseTests.strVetDiagnosesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetstrVetDiagnosesNull() {
                this[this.tableCaseTests.strVetDiagnosesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsstrVetCaseClassificationNull() {
                return this.IsNull(this.tableCaseTests.strVetCaseClassificationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetstrVetCaseClassificationNull() {
                this[this.tableCaseTests.strVetCaseClassificationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsstrExternalLaboratoryNull() {
                return this.IsNull(this.tableCaseTests.strExternalLaboratoryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetstrExternalLaboratoryNull() {
                this[this.tableCaseTests.strExternalLaboratoryColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsstrExternalEmployeeNull() {
                return this.IsNull(this.tableCaseTests.strExternalEmployeeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetstrExternalEmployeeNull() {
                this[this.tableCaseTests.strExternalEmployeeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsstrExternalDataTestResultReceivedNull() {
                return this.IsNull(this.tableCaseTests.strExternalDataTestResultReceivedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetstrExternalDataTestResultReceivedNull() {
                this[this.tableCaseTests.strExternalDataTestResultReceivedColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class CaseTestsRowChangeEvent : global::System.EventArgs {
            
            private CaseTestsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CaseTestsRowChangeEvent(CaseTestsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CaseTestsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace EIDSS.Reports.Document.Lim.Case.CaseTestDataSetTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class CaseTestsAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public CaseTestsAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "CaseTests";
            tableMapping.ColumnMappings.Add("idfTest", "idfTest");
            tableMapping.ColumnMappings.Add("idfTestObservation", "idfTestObservation");
            tableMapping.ColumnMappings.Add("idfsTestName", "idfsTestName");
            tableMapping.ColumnMappings.Add("strLocalSampleID", "strLocalSampleID");
            tableMapping.ColumnMappings.Add("strLabSampleID", "strLabSampleID");
            tableMapping.ColumnMappings.Add("strSampleType", "strSampleType");
            tableMapping.ColumnMappings.Add("strTestDiagnosis", "strTestDiagnosis");
            tableMapping.ColumnMappings.Add("strTestName", "strTestName");
            tableMapping.ColumnMappings.Add("strTestRunID", "strTestRunID");
            tableMapping.ColumnMappings.Add("datResultDate", "datResultDate");
            tableMapping.ColumnMappings.Add("strFunctionalArea", "strFunctionalArea");
            tableMapping.ColumnMappings.Add("strTestCategory", "strTestCategory");
            tableMapping.ColumnMappings.Add("strTestStatus", "strTestStatus");
            tableMapping.ColumnMappings.Add("strTestResult", "strTestResult");
            tableMapping.ColumnMappings.Add("strHumCaseId", "strHumCaseId");
            tableMapping.ColumnMappings.Add("strHumCaseStatus", "strHumCaseStatus");
            tableMapping.ColumnMappings.Add("strHumPatient", "strHumPatient");
            tableMapping.ColumnMappings.Add("strHumDiagnosis", "strHumDiagnosis");
            tableMapping.ColumnMappings.Add("strHumCaseClassification", "strHumCaseClassification");
            tableMapping.ColumnMappings.Add("strVetCaseId", "strVetCaseId");
            tableMapping.ColumnMappings.Add("strVetCaseStatus", "strVetCaseStatus");
            tableMapping.ColumnMappings.Add("strVetFarmOwner", "strVetFarmOwner");
            tableMapping.ColumnMappings.Add("strVetDiagnoses", "strVetDiagnoses");
            tableMapping.ColumnMappings.Add("strVetCaseClassification", "strVetCaseClassification");
            tableMapping.ColumnMappings.Add("strExternalLaboratory", "strExternalLaboratory");
            tableMapping.ColumnMappings.Add("strExternalEmployee", "strExternalEmployee");
            tableMapping.ColumnMappings.Add("strExternalDataTestResultReceived", "strExternalDataTestResultReceived");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::EIDSS.Reports.Properties.Settings.Default.eidss_v6ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.spRepLimCaseTests";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ObjID", global::System.Data.SqlDbType.BigInt, 8, global::System.Data.ParameterDirection.Input, 19, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LangID", global::System.Data.SqlDbType.NVarChar, 10, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(CaseTestDataSet.CaseTestsDataTable dataTable, global::System.Nullable<long> ObjID, string LangID) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((ObjID.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((long)(ObjID.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((LangID == null)) {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(LangID));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual CaseTestDataSet.CaseTestsDataTable GetData(global::System.Nullable<long> ObjID, string LangID) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((ObjID.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((long)(ObjID.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((LangID == null)) {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(LangID));
            }
            CaseTestDataSet.CaseTestsDataTable dataTable = new CaseTestDataSet.CaseTestsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
}

#pragma warning restore 1591