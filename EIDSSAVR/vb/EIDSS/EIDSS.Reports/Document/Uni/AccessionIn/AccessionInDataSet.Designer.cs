//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace EIDSS.Reports.Document.Uni.AccessionIn {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("AccessionInDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class AccessionInDataSet : global::System.Data.DataSet {
        
        private spRepLimLabSampleReceiveDataTable tablespRepLimLabSampleReceive;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public AccessionInDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected AccessionInDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["spRepLimLabSampleReceive"] != null)) {
                    base.Tables.Add(new spRepLimLabSampleReceiveDataTable(ds.Tables["spRepLimLabSampleReceive"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public spRepLimLabSampleReceiveDataTable spRepLimLabSampleReceive {
            get {
                return this.tablespRepLimLabSampleReceive;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public override global::System.Data.DataSet Clone() {
            AccessionInDataSet cln = ((AccessionInDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["spRepLimLabSampleReceive"] != null)) {
                    base.Tables.Add(new spRepLimLabSampleReceiveDataTable(ds.Tables["spRepLimLabSampleReceive"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal void InitVars(bool initTable) {
            this.tablespRepLimLabSampleReceive = ((spRepLimLabSampleReceiveDataTable)(base.Tables["spRepLimLabSampleReceive"]));
            if ((initTable == true)) {
                if ((this.tablespRepLimLabSampleReceive != null)) {
                    this.tablespRepLimLabSampleReceive.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitClass() {
            this.DataSetName = "AccessionInDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/AccessionInDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tablespRepLimLabSampleReceive = new spRepLimLabSampleReceiveDataTable();
            base.Tables.Add(this.tablespRepLimLabSampleReceive);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializespRepLimLabSampleReceive() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            AccessionInDataSet ds = new AccessionInDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void spRepLimLabSampleReceiveRowChangeEventHandler(object sender, spRepLimLabSampleReceiveRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class spRepLimLabSampleReceiveDataTable : global::System.Data.TypedTableBase<spRepLimLabSampleReceiveRow> {
            
            private global::System.Data.DataColumn columnidfCase;
            
            private global::System.Data.DataColumn columnCaseID;
            
            private global::System.Data.DataColumn columnDateOfSymptoms;
            
            private global::System.Data.DataColumn columnintCaseType;
            
            private global::System.Data.DataColumn columnLocalID;
            
            private global::System.Data.DataColumn columnFarmAddress;
            
            private global::System.Data.DataColumn columnFarmName;
            
            private global::System.Data.DataColumn columnFarmOwner;
            
            private global::System.Data.DataColumn columnPatientName;
            
            private global::System.Data.DataColumn columnAge;
            
            private global::System.Data.DataColumn columnDiagnosisInitial;
            
            private global::System.Data.DataColumn columnCurrentResidence;
            
            private global::System.Data.DataColumn columnLocalSampleID;
            
            private global::System.Data.DataColumn columnSampleType;
            
            private global::System.Data.DataColumn columnAnimalID;
            
            private global::System.Data.DataColumn columnSpecies;
            
            private global::System.Data.DataColumn columnCollectionDate;
            
            private global::System.Data.DataColumn columnDateSent;
            
            private global::System.Data.DataColumn columnLabSampleID;
            
            private global::System.Data.DataColumn columnAccessionDate;
            
            private global::System.Data.DataColumn columnSampleCondition;
            
            private global::System.Data.DataColumn columnLocation;
            
            private global::System.Data.DataColumn columnComment;
            
            private global::System.Data.DataColumn columnFunctionalArea;
            
            private global::System.Data.DataColumn columnAccessionedBy;
            
            private global::System.Data.DataColumn columnCollectedByPerson;
            
            private global::System.Data.DataColumn columnidfCurrentResidenceAddress;
            
            private global::System.Data.DataColumn columnstrASRegion;
            
            private global::System.Data.DataColumn columnstrASRayon;
            
            private global::System.Data.DataColumn columnstrASSettlement;
            
            private global::System.Data.DataColumn columnstrDiagnosisList;
            
            private global::System.Data.DataColumn columnstrCampaignID;
            
            private global::System.Data.DataColumn columnstrCampaignName;
            
            private global::System.Data.DataColumn columnstrCampaignType;
            
            private global::System.Data.DataColumn columnstrAnyAntibioticsAdministration;
            
            private global::System.Data.DataColumn columnstrAdditionalTestRequested;
            
            private global::System.Data.DataColumn columnintTests;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public spRepLimLabSampleReceiveDataTable() {
                this.TableName = "spRepLimLabSampleReceive";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal spRepLimLabSampleReceiveDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected spRepLimLabSampleReceiveDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn idfCaseColumn {
                get {
                    return this.columnidfCase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CaseIDColumn {
                get {
                    return this.columnCaseID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn DateOfSymptomsColumn {
                get {
                    return this.columnDateOfSymptoms;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn intCaseTypeColumn {
                get {
                    return this.columnintCaseType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn LocalIDColumn {
                get {
                    return this.columnLocalID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn FarmAddressColumn {
                get {
                    return this.columnFarmAddress;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn FarmNameColumn {
                get {
                    return this.columnFarmName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn FarmOwnerColumn {
                get {
                    return this.columnFarmOwner;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PatientNameColumn {
                get {
                    return this.columnPatientName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn AgeColumn {
                get {
                    return this.columnAge;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn DiagnosisInitialColumn {
                get {
                    return this.columnDiagnosisInitial;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CurrentResidenceColumn {
                get {
                    return this.columnCurrentResidence;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn LocalSampleIDColumn {
                get {
                    return this.columnLocalSampleID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn SampleTypeColumn {
                get {
                    return this.columnSampleType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn AnimalIDColumn {
                get {
                    return this.columnAnimalID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn SpeciesColumn {
                get {
                    return this.columnSpecies;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CollectionDateColumn {
                get {
                    return this.columnCollectionDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn DateSentColumn {
                get {
                    return this.columnDateSent;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn LabSampleIDColumn {
                get {
                    return this.columnLabSampleID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn AccessionDateColumn {
                get {
                    return this.columnAccessionDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn SampleConditionColumn {
                get {
                    return this.columnSampleCondition;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn LocationColumn {
                get {
                    return this.columnLocation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CommentColumn {
                get {
                    return this.columnComment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn FunctionalAreaColumn {
                get {
                    return this.columnFunctionalArea;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn AccessionedByColumn {
                get {
                    return this.columnAccessionedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CollectedByPersonColumn {
                get {
                    return this.columnCollectedByPerson;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn idfCurrentResidenceAddressColumn {
                get {
                    return this.columnidfCurrentResidenceAddress;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn strASRegionColumn {
                get {
                    return this.columnstrASRegion;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn strASRayonColumn {
                get {
                    return this.columnstrASRayon;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn strASSettlementColumn {
                get {
                    return this.columnstrASSettlement;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn strDiagnosisListColumn {
                get {
                    return this.columnstrDiagnosisList;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn strCampaignIDColumn {
                get {
                    return this.columnstrCampaignID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn strCampaignNameColumn {
                get {
                    return this.columnstrCampaignName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn strCampaignTypeColumn {
                get {
                    return this.columnstrCampaignType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn strAnyAntibioticsAdministrationColumn {
                get {
                    return this.columnstrAnyAntibioticsAdministration;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn strAdditionalTestRequestedColumn {
                get {
                    return this.columnstrAdditionalTestRequested;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn intTestsColumn {
                get {
                    return this.columnintTests;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public spRepLimLabSampleReceiveRow this[int index] {
                get {
                    return ((spRepLimLabSampleReceiveRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event spRepLimLabSampleReceiveRowChangeEventHandler spRepLimLabSampleReceiveRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event spRepLimLabSampleReceiveRowChangeEventHandler spRepLimLabSampleReceiveRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event spRepLimLabSampleReceiveRowChangeEventHandler spRepLimLabSampleReceiveRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event spRepLimLabSampleReceiveRowChangeEventHandler spRepLimLabSampleReceiveRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddspRepLimLabSampleReceiveRow(spRepLimLabSampleReceiveRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public spRepLimLabSampleReceiveRow AddspRepLimLabSampleReceiveRow(
                        long idfCase, 
                        string CaseID, 
                        System.DateTime DateOfSymptoms, 
                        int intCaseType, 
                        string LocalID, 
                        string FarmAddress, 
                        string FarmName, 
                        string FarmOwner, 
                        string PatientName, 
                        string Age, 
                        string DiagnosisInitial, 
                        string CurrentResidence, 
                        string LocalSampleID, 
                        string SampleType, 
                        string AnimalID, 
                        string Species, 
                        System.DateTime CollectionDate, 
                        System.DateTime DateSent, 
                        string LabSampleID, 
                        System.DateTime AccessionDate, 
                        string SampleCondition, 
                        string Location, 
                        string Comment, 
                        string FunctionalArea, 
                        string AccessionedBy, 
                        string CollectedByPerson, 
                        long idfCurrentResidenceAddress, 
                        string strASRegion, 
                        string strASRayon, 
                        string strASSettlement, 
                        string strDiagnosisList, 
                        string strCampaignID, 
                        string strCampaignName, 
                        string strCampaignType, 
                        string strAnyAntibioticsAdministration, 
                        string strAdditionalTestRequested, 
                        int intTests) {
                spRepLimLabSampleReceiveRow rowspRepLimLabSampleReceiveRow = ((spRepLimLabSampleReceiveRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        idfCase,
                        CaseID,
                        DateOfSymptoms,
                        intCaseType,
                        LocalID,
                        FarmAddress,
                        FarmName,
                        FarmOwner,
                        PatientName,
                        Age,
                        DiagnosisInitial,
                        CurrentResidence,
                        LocalSampleID,
                        SampleType,
                        AnimalID,
                        Species,
                        CollectionDate,
                        DateSent,
                        LabSampleID,
                        AccessionDate,
                        SampleCondition,
                        Location,
                        Comment,
                        FunctionalArea,
                        AccessionedBy,
                        CollectedByPerson,
                        idfCurrentResidenceAddress,
                        strASRegion,
                        strASRayon,
                        strASSettlement,
                        strDiagnosisList,
                        strCampaignID,
                        strCampaignName,
                        strCampaignType,
                        strAnyAntibioticsAdministration,
                        strAdditionalTestRequested,
                        intTests};
                rowspRepLimLabSampleReceiveRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowspRepLimLabSampleReceiveRow);
                return rowspRepLimLabSampleReceiveRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                spRepLimLabSampleReceiveDataTable cln = ((spRepLimLabSampleReceiveDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new spRepLimLabSampleReceiveDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnidfCase = base.Columns["idfCase"];
                this.columnCaseID = base.Columns["CaseID"];
                this.columnDateOfSymptoms = base.Columns["DateOfSymptoms"];
                this.columnintCaseType = base.Columns["intCaseType"];
                this.columnLocalID = base.Columns["LocalID"];
                this.columnFarmAddress = base.Columns["FarmAddress"];
                this.columnFarmName = base.Columns["FarmName"];
                this.columnFarmOwner = base.Columns["FarmOwner"];
                this.columnPatientName = base.Columns["PatientName"];
                this.columnAge = base.Columns["Age"];
                this.columnDiagnosisInitial = base.Columns["DiagnosisInitial"];
                this.columnCurrentResidence = base.Columns["CurrentResidence"];
                this.columnLocalSampleID = base.Columns["LocalSampleID"];
                this.columnSampleType = base.Columns["SampleType"];
                this.columnAnimalID = base.Columns["AnimalID"];
                this.columnSpecies = base.Columns["Species"];
                this.columnCollectionDate = base.Columns["CollectionDate"];
                this.columnDateSent = base.Columns["DateSent"];
                this.columnLabSampleID = base.Columns["LabSampleID"];
                this.columnAccessionDate = base.Columns["AccessionDate"];
                this.columnSampleCondition = base.Columns["SampleCondition"];
                this.columnLocation = base.Columns["Location"];
                this.columnComment = base.Columns["Comment"];
                this.columnFunctionalArea = base.Columns["FunctionalArea"];
                this.columnAccessionedBy = base.Columns["AccessionedBy"];
                this.columnCollectedByPerson = base.Columns["CollectedByPerson"];
                this.columnidfCurrentResidenceAddress = base.Columns["idfCurrentResidenceAddress"];
                this.columnstrASRegion = base.Columns["strASRegion"];
                this.columnstrASRayon = base.Columns["strASRayon"];
                this.columnstrASSettlement = base.Columns["strASSettlement"];
                this.columnstrDiagnosisList = base.Columns["strDiagnosisList"];
                this.columnstrCampaignID = base.Columns["strCampaignID"];
                this.columnstrCampaignName = base.Columns["strCampaignName"];
                this.columnstrCampaignType = base.Columns["strCampaignType"];
                this.columnstrAnyAntibioticsAdministration = base.Columns["strAnyAntibioticsAdministration"];
                this.columnstrAdditionalTestRequested = base.Columns["strAdditionalTestRequested"];
                this.columnintTests = base.Columns["intTests"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnidfCase = new global::System.Data.DataColumn("idfCase", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnidfCase);
                this.columnCaseID = new global::System.Data.DataColumn("CaseID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCaseID);
                this.columnDateOfSymptoms = new global::System.Data.DataColumn("DateOfSymptoms", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateOfSymptoms);
                this.columnintCaseType = new global::System.Data.DataColumn("intCaseType", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnintCaseType);
                this.columnLocalID = new global::System.Data.DataColumn("LocalID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLocalID);
                this.columnFarmAddress = new global::System.Data.DataColumn("FarmAddress", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFarmAddress);
                this.columnFarmName = new global::System.Data.DataColumn("FarmName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFarmName);
                this.columnFarmOwner = new global::System.Data.DataColumn("FarmOwner", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFarmOwner);
                this.columnPatientName = new global::System.Data.DataColumn("PatientName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPatientName);
                this.columnAge = new global::System.Data.DataColumn("Age", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAge);
                this.columnDiagnosisInitial = new global::System.Data.DataColumn("DiagnosisInitial", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDiagnosisInitial);
                this.columnCurrentResidence = new global::System.Data.DataColumn("CurrentResidence", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCurrentResidence);
                this.columnLocalSampleID = new global::System.Data.DataColumn("LocalSampleID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLocalSampleID);
                this.columnSampleType = new global::System.Data.DataColumn("SampleType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSampleType);
                this.columnAnimalID = new global::System.Data.DataColumn("AnimalID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAnimalID);
                this.columnSpecies = new global::System.Data.DataColumn("Species", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSpecies);
                this.columnCollectionDate = new global::System.Data.DataColumn("CollectionDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCollectionDate);
                this.columnDateSent = new global::System.Data.DataColumn("DateSent", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateSent);
                this.columnLabSampleID = new global::System.Data.DataColumn("LabSampleID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLabSampleID);
                this.columnAccessionDate = new global::System.Data.DataColumn("AccessionDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAccessionDate);
                this.columnSampleCondition = new global::System.Data.DataColumn("SampleCondition", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSampleCondition);
                this.columnLocation = new global::System.Data.DataColumn("Location", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLocation);
                this.columnComment = new global::System.Data.DataColumn("Comment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnComment);
                this.columnFunctionalArea = new global::System.Data.DataColumn("FunctionalArea", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFunctionalArea);
                this.columnAccessionedBy = new global::System.Data.DataColumn("AccessionedBy", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAccessionedBy);
                this.columnCollectedByPerson = new global::System.Data.DataColumn("CollectedByPerson", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCollectedByPerson);
                this.columnidfCurrentResidenceAddress = new global::System.Data.DataColumn("idfCurrentResidenceAddress", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnidfCurrentResidenceAddress);
                this.columnstrASRegion = new global::System.Data.DataColumn("strASRegion", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstrASRegion);
                this.columnstrASRayon = new global::System.Data.DataColumn("strASRayon", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstrASRayon);
                this.columnstrASSettlement = new global::System.Data.DataColumn("strASSettlement", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstrASSettlement);
                this.columnstrDiagnosisList = new global::System.Data.DataColumn("strDiagnosisList", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstrDiagnosisList);
                this.columnstrCampaignID = new global::System.Data.DataColumn("strCampaignID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstrCampaignID);
                this.columnstrCampaignName = new global::System.Data.DataColumn("strCampaignName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstrCampaignName);
                this.columnstrCampaignType = new global::System.Data.DataColumn("strCampaignType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstrCampaignType);
                this.columnstrAnyAntibioticsAdministration = new global::System.Data.DataColumn("strAnyAntibioticsAdministration", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstrAnyAntibioticsAdministration);
                this.columnstrAdditionalTestRequested = new global::System.Data.DataColumn("strAdditionalTestRequested", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstrAdditionalTestRequested);
                this.columnintTests = new global::System.Data.DataColumn("intTests", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnintTests);
                this.columnidfCase.ReadOnly = true;
                this.columnCaseID.ReadOnly = true;
                this.columnDateOfSymptoms.ReadOnly = true;
                this.columnintCaseType.ReadOnly = true;
                this.columnLocalID.ReadOnly = true;
                this.columnFarmAddress.ReadOnly = true;
                this.columnFarmOwner.ReadOnly = true;
                this.columnPatientName.ReadOnly = true;
                this.columnAge.ReadOnly = true;
                this.columnDiagnosisInitial.ReadOnly = true;
                this.columnCurrentResidence.ReadOnly = true;
                this.columnSampleType.ReadOnly = true;
                this.columnAnimalID.ReadOnly = true;
                this.columnSpecies.ReadOnly = true;
                this.columnFunctionalArea.ReadOnly = true;
                this.columnAccessionedBy.ReadOnly = true;
                this.columnCollectedByPerson.ReadOnly = true;
                this.columnstrASRegion.ReadOnly = true;
                this.columnstrASRayon.ReadOnly = true;
                this.columnstrASSettlement.ReadOnly = true;
                this.columnstrDiagnosisList.ReadOnly = true;
                this.columnstrCampaignType.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public spRepLimLabSampleReceiveRow NewspRepLimLabSampleReceiveRow() {
                return ((spRepLimLabSampleReceiveRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new spRepLimLabSampleReceiveRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(spRepLimLabSampleReceiveRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.spRepLimLabSampleReceiveRowChanged != null)) {
                    this.spRepLimLabSampleReceiveRowChanged(this, new spRepLimLabSampleReceiveRowChangeEvent(((spRepLimLabSampleReceiveRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.spRepLimLabSampleReceiveRowChanging != null)) {
                    this.spRepLimLabSampleReceiveRowChanging(this, new spRepLimLabSampleReceiveRowChangeEvent(((spRepLimLabSampleReceiveRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.spRepLimLabSampleReceiveRowDeleted != null)) {
                    this.spRepLimLabSampleReceiveRowDeleted(this, new spRepLimLabSampleReceiveRowChangeEvent(((spRepLimLabSampleReceiveRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.spRepLimLabSampleReceiveRowDeleting != null)) {
                    this.spRepLimLabSampleReceiveRowDeleting(this, new spRepLimLabSampleReceiveRowChangeEvent(((spRepLimLabSampleReceiveRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemovespRepLimLabSampleReceiveRow(spRepLimLabSampleReceiveRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                AccessionInDataSet ds = new AccessionInDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "spRepLimLabSampleReceiveDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class spRepLimLabSampleReceiveRow : global::System.Data.DataRow {
            
            private spRepLimLabSampleReceiveDataTable tablespRepLimLabSampleReceive;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal spRepLimLabSampleReceiveRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablespRepLimLabSampleReceive = ((spRepLimLabSampleReceiveDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long idfCase {
                get {
                    try {
                        return ((long)(this[this.tablespRepLimLabSampleReceive.idfCaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'idfCase\' in table \'spRepLimLabSampleReceive\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablespRepLimLabSampleReceive.idfCaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string CaseID {
                get {
                    if (this.IsCaseIDNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tablespRepLimLabSampleReceive.CaseIDColumn]));
                    }
                }
                set {
                    this[this.tablespRepLimLabSampleReceive.CaseIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.DateTime DateOfSymptoms {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tablespRepLimLabSampleReceive.DateOfSymptomsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DateOfSymptoms\' in table \'spRepLimLabSampleReceive\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tablespRepLimLabSampleReceive.DateOfSymptomsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int intCaseType {
                get {
                    try {
                        return ((int)(this[this.tablespRepLimLabSampleReceive.intCaseTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'intCaseType\' in table \'spRepLimLabSampleReceive\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tablespRepLimLabSampleReceive.intCaseTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string LocalID {
                get {
                    if (this.IsLocalIDNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tablespRepLimLabSampleReceive.LocalIDColumn]));
                    }
                }
                set {
                    this[this.tablespRepLimLabSampleReceive.LocalIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string FarmAddress {
                get {
                    if (this.IsFarmAddressNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tablespRepLimLabSampleReceive.FarmAddressColumn]));
                    }
                }
                set {
                    this[this.tablespRepLimLabSampleReceive.FarmAddressColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string FarmName {
                get {
                    if (this.IsFarmNameNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tablespRepLimLabSampleReceive.FarmNameColumn]));
                    }
                }
                set {
                    this[this.tablespRepLimLabSampleReceive.FarmNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string FarmOwner {
                get {
                    if (this.IsFarmOwnerNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tablespRepLimLabSampleReceive.FarmOwnerColumn]));
                    }
                }
                set {
                    this[this.tablespRepLimLabSampleReceive.FarmOwnerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string PatientName {
                get {
                    if (this.IsPatientNameNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tablespRepLimLabSampleReceive.PatientNameColumn]));
                    }
                }
                set {
                    this[this.tablespRepLimLabSampleReceive.PatientNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Age {
                get {
                    if (this.IsAgeNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tablespRepLimLabSampleReceive.AgeColumn]));
                    }
                }
                set {
                    this[this.tablespRepLimLabSampleReceive.AgeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string DiagnosisInitial {
                get {
                    if (this.IsDiagnosisInitialNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tablespRepLimLabSampleReceive.DiagnosisInitialColumn]));
                    }
                }
                set {
                    this[this.tablespRepLimLabSampleReceive.DiagnosisInitialColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string CurrentResidence {
                get {
                    if (this.IsCurrentResidenceNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tablespRepLimLabSampleReceive.CurrentResidenceColumn]));
                    }
                }
                set {
                    this[this.tablespRepLimLabSampleReceive.CurrentResidenceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string LocalSampleID {
                get {
                    if (this.IsLocalSampleIDNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tablespRepLimLabSampleReceive.LocalSampleIDColumn]));
                    }
                }
                set {
                    this[this.tablespRepLimLabSampleReceive.LocalSampleIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string SampleType {
                get {
                    if (this.IsSampleTypeNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tablespRepLimLabSampleReceive.SampleTypeColumn]));
                    }
                }
                set {
                    this[this.tablespRepLimLabSampleReceive.SampleTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string AnimalID {
                get {
                    if (this.IsAnimalIDNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tablespRepLimLabSampleReceive.AnimalIDColumn]));
                    }
                }
                set {
                    this[this.tablespRepLimLabSampleReceive.AnimalIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Species {
                get {
                    if (this.IsSpeciesNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tablespRepLimLabSampleReceive.SpeciesColumn]));
                    }
                }
                set {
                    this[this.tablespRepLimLabSampleReceive.SpeciesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.DateTime CollectionDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tablespRepLimLabSampleReceive.CollectionDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CollectionDate\' in table \'spRepLimLabSampleReceive\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tablespRepLimLabSampleReceive.CollectionDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.DateTime DateSent {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tablespRepLimLabSampleReceive.DateSentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DateSent\' in table \'spRepLimLabSampleReceive\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablespRepLimLabSampleReceive.DateSentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string LabSampleID {
                get {
                    if (this.IsLabSampleIDNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tablespRepLimLabSampleReceive.LabSampleIDColumn]));
                    }
                }
                set {
                    this[this.tablespRepLimLabSampleReceive.LabSampleIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.DateTime AccessionDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tablespRepLimLabSampleReceive.AccessionDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AccessionDate\' in table \'spRepLimLabSampleReceive\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tablespRepLimLabSampleReceive.AccessionDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string SampleCondition {
                get {
                    if (this.IsSampleConditionNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tablespRepLimLabSampleReceive.SampleConditionColumn]));
                    }
                }
                set {
                    this[this.tablespRepLimLabSampleReceive.SampleConditionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Location {
                get {
                    if (this.IsLocationNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tablespRepLimLabSampleReceive.LocationColumn]));
                    }
                }
                set {
                    this[this.tablespRepLimLabSampleReceive.LocationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Comment {
                get {
                    if (this.IsCommentNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tablespRepLimLabSampleReceive.CommentColumn]));
                    }
                }
                set {
                    this[this.tablespRepLimLabSampleReceive.CommentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string FunctionalArea {
                get {
                    if (this.IsFunctionalAreaNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tablespRepLimLabSampleReceive.FunctionalAreaColumn]));
                    }
                }
                set {
                    this[this.tablespRepLimLabSampleReceive.FunctionalAreaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string AccessionedBy {
                get {
                    if (this.IsAccessionedByNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tablespRepLimLabSampleReceive.AccessionedByColumn]));
                    }
                }
                set {
                    this[this.tablespRepLimLabSampleReceive.AccessionedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string CollectedByPerson {
                get {
                    if (this.IsCollectedByPersonNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tablespRepLimLabSampleReceive.CollectedByPersonColumn]));
                    }
                }
                set {
                    this[this.tablespRepLimLabSampleReceive.CollectedByPersonColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long idfCurrentResidenceAddress {
                get {
                    try {
                        return ((long)(this[this.tablespRepLimLabSampleReceive.idfCurrentResidenceAddressColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'idfCurrentResidenceAddress\' in table \'spRepLimLabSampleRece" +
                                "ive\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablespRepLimLabSampleReceive.idfCurrentResidenceAddressColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string strASRegion {
                get {
                    if (this.IsstrASRegionNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tablespRepLimLabSampleReceive.strASRegionColumn]));
                    }
                }
                set {
                    this[this.tablespRepLimLabSampleReceive.strASRegionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string strASRayon {
                get {
                    if (this.IsstrASRayonNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tablespRepLimLabSampleReceive.strASRayonColumn]));
                    }
                }
                set {
                    this[this.tablespRepLimLabSampleReceive.strASRayonColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string strASSettlement {
                get {
                    if (this.IsstrASSettlementNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tablespRepLimLabSampleReceive.strASSettlementColumn]));
                    }
                }
                set {
                    this[this.tablespRepLimLabSampleReceive.strASSettlementColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string strDiagnosisList {
                get {
                    if (this.IsstrDiagnosisListNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tablespRepLimLabSampleReceive.strDiagnosisListColumn]));
                    }
                }
                set {
                    this[this.tablespRepLimLabSampleReceive.strDiagnosisListColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string strCampaignID {
                get {
                    if (this.IsstrCampaignIDNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tablespRepLimLabSampleReceive.strCampaignIDColumn]));
                    }
                }
                set {
                    this[this.tablespRepLimLabSampleReceive.strCampaignIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string strCampaignName {
                get {
                    if (this.IsstrCampaignNameNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tablespRepLimLabSampleReceive.strCampaignNameColumn]));
                    }
                }
                set {
                    this[this.tablespRepLimLabSampleReceive.strCampaignNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string strCampaignType {
                get {
                    if (this.IsstrCampaignTypeNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tablespRepLimLabSampleReceive.strCampaignTypeColumn]));
                    }
                }
                set {
                    this[this.tablespRepLimLabSampleReceive.strCampaignTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string strAnyAntibioticsAdministration {
                get {
                    try {
                        return ((string)(this[this.tablespRepLimLabSampleReceive.strAnyAntibioticsAdministrationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'strAnyAntibioticsAdministration\' in table \'spRepLimLabSampl" +
                                "eReceive\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablespRepLimLabSampleReceive.strAnyAntibioticsAdministrationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string strAdditionalTestRequested {
                get {
                    try {
                        return ((string)(this[this.tablespRepLimLabSampleReceive.strAdditionalTestRequestedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'strAdditionalTestRequested\' in table \'spRepLimLabSampleRece" +
                                "ive\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablespRepLimLabSampleReceive.strAdditionalTestRequestedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int intTests {
                get {
                    try {
                        return ((int)(this[this.tablespRepLimLabSampleReceive.intTestsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'intTests\' in table \'spRepLimLabSampleReceive\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablespRepLimLabSampleReceive.intTestsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsidfCaseNull() {
                return this.IsNull(this.tablespRepLimLabSampleReceive.idfCaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetidfCaseNull() {
                this[this.tablespRepLimLabSampleReceive.idfCaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCaseIDNull() {
                return this.IsNull(this.tablespRepLimLabSampleReceive.CaseIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCaseIDNull() {
                this[this.tablespRepLimLabSampleReceive.CaseIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDateOfSymptomsNull() {
                return this.IsNull(this.tablespRepLimLabSampleReceive.DateOfSymptomsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetDateOfSymptomsNull() {
                this[this.tablespRepLimLabSampleReceive.DateOfSymptomsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsintCaseTypeNull() {
                return this.IsNull(this.tablespRepLimLabSampleReceive.intCaseTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetintCaseTypeNull() {
                this[this.tablespRepLimLabSampleReceive.intCaseTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsLocalIDNull() {
                return this.IsNull(this.tablespRepLimLabSampleReceive.LocalIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetLocalIDNull() {
                this[this.tablespRepLimLabSampleReceive.LocalIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsFarmAddressNull() {
                return this.IsNull(this.tablespRepLimLabSampleReceive.FarmAddressColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetFarmAddressNull() {
                this[this.tablespRepLimLabSampleReceive.FarmAddressColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsFarmNameNull() {
                return this.IsNull(this.tablespRepLimLabSampleReceive.FarmNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetFarmNameNull() {
                this[this.tablespRepLimLabSampleReceive.FarmNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsFarmOwnerNull() {
                return this.IsNull(this.tablespRepLimLabSampleReceive.FarmOwnerColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetFarmOwnerNull() {
                this[this.tablespRepLimLabSampleReceive.FarmOwnerColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPatientNameNull() {
                return this.IsNull(this.tablespRepLimLabSampleReceive.PatientNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPatientNameNull() {
                this[this.tablespRepLimLabSampleReceive.PatientNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsAgeNull() {
                return this.IsNull(this.tablespRepLimLabSampleReceive.AgeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetAgeNull() {
                this[this.tablespRepLimLabSampleReceive.AgeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDiagnosisInitialNull() {
                return this.IsNull(this.tablespRepLimLabSampleReceive.DiagnosisInitialColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetDiagnosisInitialNull() {
                this[this.tablespRepLimLabSampleReceive.DiagnosisInitialColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCurrentResidenceNull() {
                return this.IsNull(this.tablespRepLimLabSampleReceive.CurrentResidenceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCurrentResidenceNull() {
                this[this.tablespRepLimLabSampleReceive.CurrentResidenceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsLocalSampleIDNull() {
                return this.IsNull(this.tablespRepLimLabSampleReceive.LocalSampleIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetLocalSampleIDNull() {
                this[this.tablespRepLimLabSampleReceive.LocalSampleIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsSampleTypeNull() {
                return this.IsNull(this.tablespRepLimLabSampleReceive.SampleTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetSampleTypeNull() {
                this[this.tablespRepLimLabSampleReceive.SampleTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsAnimalIDNull() {
                return this.IsNull(this.tablespRepLimLabSampleReceive.AnimalIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetAnimalIDNull() {
                this[this.tablespRepLimLabSampleReceive.AnimalIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsSpeciesNull() {
                return this.IsNull(this.tablespRepLimLabSampleReceive.SpeciesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetSpeciesNull() {
                this[this.tablespRepLimLabSampleReceive.SpeciesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCollectionDateNull() {
                return this.IsNull(this.tablespRepLimLabSampleReceive.CollectionDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCollectionDateNull() {
                this[this.tablespRepLimLabSampleReceive.CollectionDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDateSentNull() {
                return this.IsNull(this.tablespRepLimLabSampleReceive.DateSentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetDateSentNull() {
                this[this.tablespRepLimLabSampleReceive.DateSentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsLabSampleIDNull() {
                return this.IsNull(this.tablespRepLimLabSampleReceive.LabSampleIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetLabSampleIDNull() {
                this[this.tablespRepLimLabSampleReceive.LabSampleIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsAccessionDateNull() {
                return this.IsNull(this.tablespRepLimLabSampleReceive.AccessionDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetAccessionDateNull() {
                this[this.tablespRepLimLabSampleReceive.AccessionDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsSampleConditionNull() {
                return this.IsNull(this.tablespRepLimLabSampleReceive.SampleConditionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetSampleConditionNull() {
                this[this.tablespRepLimLabSampleReceive.SampleConditionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsLocationNull() {
                return this.IsNull(this.tablespRepLimLabSampleReceive.LocationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetLocationNull() {
                this[this.tablespRepLimLabSampleReceive.LocationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCommentNull() {
                return this.IsNull(this.tablespRepLimLabSampleReceive.CommentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCommentNull() {
                this[this.tablespRepLimLabSampleReceive.CommentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsFunctionalAreaNull() {
                return this.IsNull(this.tablespRepLimLabSampleReceive.FunctionalAreaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetFunctionalAreaNull() {
                this[this.tablespRepLimLabSampleReceive.FunctionalAreaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsAccessionedByNull() {
                return this.IsNull(this.tablespRepLimLabSampleReceive.AccessionedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetAccessionedByNull() {
                this[this.tablespRepLimLabSampleReceive.AccessionedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCollectedByPersonNull() {
                return this.IsNull(this.tablespRepLimLabSampleReceive.CollectedByPersonColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCollectedByPersonNull() {
                this[this.tablespRepLimLabSampleReceive.CollectedByPersonColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsidfCurrentResidenceAddressNull() {
                return this.IsNull(this.tablespRepLimLabSampleReceive.idfCurrentResidenceAddressColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetidfCurrentResidenceAddressNull() {
                this[this.tablespRepLimLabSampleReceive.idfCurrentResidenceAddressColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsstrASRegionNull() {
                return this.IsNull(this.tablespRepLimLabSampleReceive.strASRegionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetstrASRegionNull() {
                this[this.tablespRepLimLabSampleReceive.strASRegionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsstrASRayonNull() {
                return this.IsNull(this.tablespRepLimLabSampleReceive.strASRayonColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetstrASRayonNull() {
                this[this.tablespRepLimLabSampleReceive.strASRayonColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsstrASSettlementNull() {
                return this.IsNull(this.tablespRepLimLabSampleReceive.strASSettlementColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetstrASSettlementNull() {
                this[this.tablespRepLimLabSampleReceive.strASSettlementColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsstrDiagnosisListNull() {
                return this.IsNull(this.tablespRepLimLabSampleReceive.strDiagnosisListColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetstrDiagnosisListNull() {
                this[this.tablespRepLimLabSampleReceive.strDiagnosisListColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsstrCampaignIDNull() {
                return this.IsNull(this.tablespRepLimLabSampleReceive.strCampaignIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetstrCampaignIDNull() {
                this[this.tablespRepLimLabSampleReceive.strCampaignIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsstrCampaignNameNull() {
                return this.IsNull(this.tablespRepLimLabSampleReceive.strCampaignNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetstrCampaignNameNull() {
                this[this.tablespRepLimLabSampleReceive.strCampaignNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsstrCampaignTypeNull() {
                return this.IsNull(this.tablespRepLimLabSampleReceive.strCampaignTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetstrCampaignTypeNull() {
                this[this.tablespRepLimLabSampleReceive.strCampaignTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsstrAnyAntibioticsAdministrationNull() {
                return this.IsNull(this.tablespRepLimLabSampleReceive.strAnyAntibioticsAdministrationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetstrAnyAntibioticsAdministrationNull() {
                this[this.tablespRepLimLabSampleReceive.strAnyAntibioticsAdministrationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsstrAdditionalTestRequestedNull() {
                return this.IsNull(this.tablespRepLimLabSampleReceive.strAdditionalTestRequestedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetstrAdditionalTestRequestedNull() {
                this[this.tablespRepLimLabSampleReceive.strAdditionalTestRequestedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsintTestsNull() {
                return this.IsNull(this.tablespRepLimLabSampleReceive.intTestsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetintTestsNull() {
                this[this.tablespRepLimLabSampleReceive.intTestsColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class spRepLimLabSampleReceiveRowChangeEvent : global::System.EventArgs {
            
            private spRepLimLabSampleReceiveRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public spRepLimLabSampleReceiveRowChangeEvent(spRepLimLabSampleReceiveRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public spRepLimLabSampleReceiveRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace EIDSS.Reports.Document.Uni.AccessionIn.AccessionInDataSetTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class spRepLimLabSampleReceiveTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public spRepLimLabSampleReceiveTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "spRepLimLabSampleReceive";
            tableMapping.ColumnMappings.Add("idfCase", "idfCase");
            tableMapping.ColumnMappings.Add("CaseID", "CaseID");
            tableMapping.ColumnMappings.Add("DateOfSymptoms", "DateOfSymptoms");
            tableMapping.ColumnMappings.Add("intCaseType", "intCaseType");
            tableMapping.ColumnMappings.Add("LocalID", "LocalID");
            tableMapping.ColumnMappings.Add("FarmAddress", "FarmAddress");
            tableMapping.ColumnMappings.Add("FarmName", "FarmName");
            tableMapping.ColumnMappings.Add("FarmOwner", "FarmOwner");
            tableMapping.ColumnMappings.Add("PatientName", "PatientName");
            tableMapping.ColumnMappings.Add("Age", "Age");
            tableMapping.ColumnMappings.Add("DiagnosisInitial", "DiagnosisInitial");
            tableMapping.ColumnMappings.Add("CurrentResidence", "CurrentResidence");
            tableMapping.ColumnMappings.Add("LocalSampleID", "LocalSampleID");
            tableMapping.ColumnMappings.Add("SampleType", "SampleType");
            tableMapping.ColumnMappings.Add("AnimalID", "AnimalID");
            tableMapping.ColumnMappings.Add("Species", "Species");
            tableMapping.ColumnMappings.Add("CollectionDate", "CollectionDate");
            tableMapping.ColumnMappings.Add("DateSent", "DateSent");
            tableMapping.ColumnMappings.Add("LabSampleID", "LabSampleID");
            tableMapping.ColumnMappings.Add("AccessionDate", "AccessionDate");
            tableMapping.ColumnMappings.Add("SampleCondition", "SampleCondition");
            tableMapping.ColumnMappings.Add("Location", "Location");
            tableMapping.ColumnMappings.Add("Comment", "Comment");
            tableMapping.ColumnMappings.Add("FunctionalArea", "FunctionalArea");
            tableMapping.ColumnMappings.Add("AccessionedBy", "AccessionedBy");
            tableMapping.ColumnMappings.Add("CollectedByPerson", "CollectedByPerson");
            tableMapping.ColumnMappings.Add("idfCurrentResidenceAddress", "idfCurrentResidenceAddress");
            tableMapping.ColumnMappings.Add("strASRegion", "strASRegion");
            tableMapping.ColumnMappings.Add("strASRayon", "strASRayon");
            tableMapping.ColumnMappings.Add("strASSettlement", "strASSettlement");
            tableMapping.ColumnMappings.Add("strDiagnosisList", "strDiagnosisList");
            tableMapping.ColumnMappings.Add("strCampaignID", "strCampaignID");
            tableMapping.ColumnMappings.Add("strCampaignName", "strCampaignName");
            tableMapping.ColumnMappings.Add("strCampaignType", "strCampaignType");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::EIDSS.Reports.Properties.Settings.Default.eidss_v6ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.spRepLimLabSampleReceive";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ObjID", global::System.Data.SqlDbType.BigInt, 8, global::System.Data.ParameterDirection.Input, 19, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LangID", global::System.Data.SqlDbType.NVarChar, 10, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(AccessionInDataSet.spRepLimLabSampleReceiveDataTable dataTable, global::System.Nullable<long> ObjID, string LangID) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((ObjID.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((long)(ObjID.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((LangID == null)) {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(LangID));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual AccessionInDataSet.spRepLimLabSampleReceiveDataTable GetData(global::System.Nullable<long> ObjID, string LangID) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((ObjID.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((long)(ObjID.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((LangID == null)) {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(LangID));
            }
            AccessionInDataSet.spRepLimLabSampleReceiveDataTable dataTable = new AccessionInDataSet.spRepLimLabSampleReceiveDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
}

#pragma warning restore 1591