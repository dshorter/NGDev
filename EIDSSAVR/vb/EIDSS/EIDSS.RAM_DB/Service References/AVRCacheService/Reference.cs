//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using eidss.model.AVR.DataBase;

namespace eidss.avr.db.AVRCacheService
{


    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName = "AVRCacheService.IAVRFacade")]
    public interface IAVRFacade
    {

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IAVRFacade/ExportChartToJpg", ReplyAction = "http://tempuri.org/IAVRFacade/ExportChartToJpgResponse")]
        eidss.model.AVR.ServiceData.ChartExportDTO ExportChartToJpg(eidss.model.AVR.ServiceData.ChartTableDTO zippedData);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IAVRFacade/GetCachedView", ReplyAction = "http://tempuri.org/IAVRFacade/GetCachedViewResponse")]
        eidss.model.AVR.ServiceData.ViewDTO GetCachedView(string sessionId, long layoutId, string lang);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IAVRFacade/InvalidateViewCache", ReplyAction = "http://tempuri.org/IAVRFacade/InvalidateViewCacheResponse")]
        void InvalidateViewCache(long layoutId);
  
        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IAVRFacade/GetCachedQueryTableHeader", ReplyAction = "http://tempuri.org/IAVRFacade/GetCachedQueryTableHeaderResponse")]
        eidss.model.AVR.ServiceData.QueryTableHeaderDTO GetCachedQueryTableHeader(long queryId, string lang, bool isArchive);


        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IAVRFacade/DoesCachedQueryExists", ReplyAction = "http://tempuri.org/IAVRFacade/DoesCachedQueryExistsResponse")]
        bool DoesCachedQueryExists(long queryId, string lang, bool isArchive);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IAVRFacade/GetConcreteCachedQueryTableHeader", ReplyAction = "http://tempuri.org/IAVRFacade/GetConcreteCachedQueryTableHeaderResponse")]
        eidss.model.AVR.ServiceData.QueryTableHeaderDTO GetConcreteCachedQueryTableHeader(long queryCacheId, long queryId, string lang, bool isArchive);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IAVRFacade/GetCachedQueryTablePacket", ReplyAction = "http://tempuri.org/IAVRFacade/GetCachedQueryTablePacketResponse")]
        eidss.model.AVR.ServiceData.QueryTablePacketDTO GetCachedQueryTablePacket(long queryCacheId, int packetNumber, int totalPacketCount);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IAVRFacade/InvalidateQueryCacheForLanguage", ReplyAction = "http://tempuri.org/IAVRFacade/InvalidateQueryCacheForLanguageResponse")]
        void InvalidateQueryCacheForLanguage(long queryId, string lang);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IAVRFacade/InvalidateQueryCache", ReplyAction = "http://tempuri.org/IAVRFacade/InvalidateQueryCacheResponse")]
        void InvalidateQueryCache(long queryId);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IAVRFacade/GetQueryRefreshDateTime", ReplyAction = "http://tempuri.org/IAVRFacade/GetQueryRefreshDateTimeResponse")]
        System.DateTime GetQueryRefreshDateTime(long queryId, string lang);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IAVRFacade/GetServiceVersion", ReplyAction = "http://tempuri.org/IAVRFacade/GetServiceVersionResponse")]
        System.Version GetServiceVersion();

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IAVRFacade/GetDatabaseName", ReplyAction = "http://tempuri.org/IAVRFacade/GetDatabaseNameResponse")]
        DatabaseNames GetDatabaseName();

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IAVRFacade/GetQueryIdList", ReplyAction = "http://tempuri.org/IAVRFacade/GetQueryIdListResponse")]
        long[] GetQueryIdList();

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IAVRFacade/GetLayoutIdList", ReplyAction = "http://tempuri.org/IAVRFacade/GetLayoutIdListResponse")]
        long[] GetLayoutIdList();

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IAVRFacade/CopyLayout", ReplyAction = "http://tempuri.org/IAVRFacade/CopyLayoutResponse")]
        long CopyLayout(long layoutId, string lang);
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAVRFacadeChannel : eidss.avr.db.AVRCacheService.IAVRFacade, System.ServiceModel.IClientChannel
    {
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AVRFacadeClient : System.ServiceModel.ClientBase<eidss.avr.db.AVRCacheService.IAVRFacade>, eidss.avr.db.AVRCacheService.IAVRFacade
    {

        public AVRFacadeClient()
        {
        }

        public AVRFacadeClient(string endpointConfigurationName) :
            base(endpointConfigurationName)
        {
        }

        public AVRFacadeClient(string endpointConfigurationName, string remoteAddress) :
            base(endpointConfigurationName, remoteAddress)
        {
        }

        public AVRFacadeClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) :
            base(endpointConfigurationName, remoteAddress)
        {
        }

        public AVRFacadeClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) :
            base(binding, remoteAddress)
        {
        }

        public eidss.model.AVR.ServiceData.ChartExportDTO ExportChartToJpg(eidss.model.AVR.ServiceData.ChartTableDTO zippedData)
        {
            return base.Channel.ExportChartToJpg(zippedData);
        }

        public eidss.model.AVR.ServiceData.ViewDTO GetCachedView(string sessionId, long layoutId, string lang)
        {
            return base.Channel.GetCachedView(sessionId, layoutId, lang);
        }

        public eidss.model.AVR.ServiceData.QueryTableHeaderDTO GetCachedQueryTableHeader(long queryId, string lang, bool isArchive)
        {
            return base.Channel.GetCachedQueryTableHeader(queryId, lang, isArchive);
        }

        public eidss.model.AVR.ServiceData.QueryTableHeaderDTO GetConcreteCachedQueryTableHeader(long queryCacheId, long queryId, string lang, bool isArchive)
        {
            return base.Channel.GetConcreteCachedQueryTableHeader(queryCacheId, queryId, lang, isArchive);
        }

        public bool DoesCachedQueryExists(long queryId, string lang, bool isArchive)
        {
            return base.Channel.DoesCachedQueryExists(queryId, lang, isArchive);
        }

        public eidss.model.AVR.ServiceData.QueryTablePacketDTO GetCachedQueryTablePacket(long queryCacheId, int packetNumber, int totalPacketCount)
        {
            return base.Channel.GetCachedQueryTablePacket(queryCacheId, packetNumber, totalPacketCount);
        }

        public void InvalidateQueryCacheForLanguage(long queryId, string lang)
        {
            base.Channel.InvalidateQueryCacheForLanguage(queryId, lang);
        }

        public void InvalidateQueryCache(long queryId)
        {
            base.Channel.InvalidateQueryCache(queryId);
        }

        public void InvalidateViewCache(long layoutId)
        {
            base.Channel.InvalidateViewCache(layoutId);
        }
        public System.DateTime GetQueryRefreshDateTime(long queryId, string lang)
        {
            return base.Channel.GetQueryRefreshDateTime(queryId, lang);
        }

        public System.Version GetServiceVersion()
        {
            return base.Channel.GetServiceVersion();
        }

        public DatabaseNames GetDatabaseName()
        {
            return base.Channel.GetDatabaseName();
        }

        public long[] GetQueryIdList()
        {
            return base.Channel.GetQueryIdList();
        }

        public long[] GetLayoutIdList()
        {
            return base.Channel.GetLayoutIdList();
        }

        public long CopyLayout(long layoutId, string lang)
        {
            return base.Channel.CopyLayout(layoutId, lang);
        }
    }
}
